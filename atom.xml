<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Skyline 技术笔记</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-03-10T08:37:07.401Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Skyline</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>npm知识总结</title>
    <link href="http://yoursite.com/2020/03/10/npm%E7%9B%B8%E5%85%B3%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2020/03/10/npm%E7%9B%B8%E5%85%B3%E6%80%BB%E7%BB%93/</id>
    <published>2020-03-10T06:52:04.000Z</published>
    <updated>2020-03-10T08:37:07.401Z</updated>
    
    <content type="html"><![CDATA[<p>正常来讲，npm是所有前端工程师或者JS工程师都默认熟悉的包管理工具。随着长时间工作的积累，知识逐渐积累，我简单梳理总结一下重点。</p><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>希望舒适使用npm或者node，下面两个全局依赖应该是默认都要安装：</p><ul><li>nrm 用于切换registry</li><li>nvm node版本管理</li></ul><h2 id="梳理"><a href="#梳理" class="headerlink" title="梳理"></a>梳理</h2><h3 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h3><p>对于package.json，或许有一些同学会有盲点。</p><ul><li>peerDependencies 提示宿主环境去安装满足插件peerDependencies所指定依赖的包</li><li>scripts 重点关注和version相关的生命周期钩子<ul><li>preversion</li><li>version</li><li>postversion</li></ul></li></ul><h3 id="package-lock-json"><a href="#package-lock-json" class="headerlink" title="package-lock.json"></a>package-lock.json</h3><p>这里<strong>重点关注</strong>package-lock.json文件和package.json文件对npm install的处理。<br>这里需要转载前人的总结，转载自<a href="https://www.cnblogs.com/surui/p/9038287.html" target="_blank" rel="noopener">https://www.cnblogs.com/surui/p/9038287.html</a><br>自npm 5.0版本发布以来，npm istall的规则发生了三次变化:</p><ol><li>npm 5.0.x版本，不管package.json怎么变，npm install时都会根据package-lock.json下载；</li><li>npm 5.1.0版本后，npm install会无视package-lock.json,下载最新的版本；</li><li>npm 5.4.2版本后，如果package.json与package-lock.json不一致，npm install会根据package.json去下载版本，并更新package-lock.json；如果package.json与package-lock.json一致，npm install会根据package-lock.json去下载。</li></ol><h3 id="version"><a href="#version" class="headerlink" title="version"></a>version</h3><p>version往往也是工作中经常出现问题的地方。解决报错一定要先排除version的问题。</p><h4 id="semver"><a href="#semver" class="headerlink" title="semver"></a>semver</h4><p>详情请查看官方文档<a href="https://semver.org/lang/zh-CN/" target="_blank" rel="noopener">语义化版本号</a></p><h4 id="符号注释"><a href="#符号注释" class="headerlink" title="符号注释"></a>符号注释</h4><table><thead><tr><th>示例</th><th>解释</th></tr></thead><tbody><tr><td>*</td><td>任意版本</td></tr><tr><td>1.1.0</td><td>指定版本</td></tr><tr><td>~1.1.0</td><td>&gt;=1.1.0 &amp;&amp; &lt; 1.2.0</td></tr><tr><td>^1.1.0</td><td>&gt;=1.1.0 &amp;&amp; &lt; 2.0.0</td></tr></tbody></table><h3 id="npx"><a href="#npx" class="headerlink" title="npx"></a>npx</h3><p>对于npx，要么你一点都不知道，要么就应该知道它有什么作用。</p><ul><li>调用项目安装的模块，例如: npx lerna bootstrap，告别node-modules去执行。</li><li>使用不同版本的node，例如：npx <a href="mailto:node@10.15.3">node@10.15.3</a> -v，方便临时切换node版本。</li></ul><h3 id="私有npm库"><a href="#私有npm库" class="headerlink" title="私有npm库"></a>私有npm库</h3><p>搭建私有npm可能是有一定前端项目规模的公司必须面对的问题。<br>我列出两种方案供参考。</p><ul><li>基于阿里的cnpm</li><li>使用verdaccio</li></ul><h3 id="npm缓存"><a href="#npm缓存" class="headerlink" title="npm缓存"></a>npm缓存</h3><p>注意npm v5以后不需要通过npm cache clean –force解决缓存导致的问题。npm的缓存基于pacote实现，<a href="https://www.npmjs.com/package/pacote，具体内容我还没看。总之官网的指引就是排查问题不要再把焦点放在npm缓存上。缓存路径可以通过`npm" target="_blank" rel="noopener">https://www.npmjs.com/package/pacote，具体内容我还没看。总之官网的指引就是排查问题不要再把焦点放在npm缓存上。缓存路径可以通过`npm</a> config get cache`获取。</p><h3 id="publish"><a href="#publish" class="headerlink" title="publish"></a>publish</h3><p>如果你到2020年还没有发布过npm包，尝试发一个。稍微要留意的是，如果发包到私有库，包名需要加上你公司的命名空间@scope。</p><h3 id="npmrc"><a href="#npmrc" class="headerlink" title=".npmrc"></a>.npmrc</h3><p>npm自己的配置文件，通过<code>npm config edit</code>命令修改。我一般用它修改registry，proxy等。你也可以用<code>npm config get xxx</code>和<code>npm config set xxx</code>来获取或者设置config。命令设置的config优先级低于.npmrc文件。</p><h2 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h2><p>大概总结就是这些，日后有踩到坑再补充。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;正常来讲，npm是所有前端工程师或者JS工程师都默认熟悉的包管理工具。随着长时间工作的积累，知识逐渐积累，我简单梳理总结一下重点。&lt;/p&gt;
&lt;h2 id=&quot;准备&quot;&gt;&lt;a href=&quot;#准备&quot; class=&quot;headerlink&quot; title=&quot;准备&quot;&gt;&lt;/a&gt;准备&lt;/h2&gt;
      
    
    </summary>
    
    
    
      <category term="npm" scheme="http://yoursite.com/tags/npm/"/>
    
  </entry>
  
  <entry>
    <title>关注失败还是关注错误</title>
    <link href="http://yoursite.com/2020/03/09/%E5%85%B3%E6%B3%A8%E5%A4%B1%E8%B4%A5%E8%BF%98%E6%98%AF%E5%85%B3%E6%B3%A8%E9%94%99%E8%AF%AF/"/>
    <id>http://yoursite.com/2020/03/09/%E5%85%B3%E6%B3%A8%E5%A4%B1%E8%B4%A5%E8%BF%98%E6%98%AF%E5%85%B3%E6%B3%A8%E9%94%99%E8%AF%AF/</id>
    <published>2020-03-09T07:44:57.000Z</published>
    <updated>2020-03-09T09:51:06.486Z</updated>
    
    <content type="html"><![CDATA[<p>我最近在生活中遇到不少问题，也遭遇了不少的失败。这些失败导致我郁郁不乐。所以我写这篇文章想给自己梳理一下，给焦虑的内心解压。</p><p>很显然，面对失败，理性的人应该选择关注错误而不是关注失败。虽然失败的确是一个让人难过的结果，但是生活并不一定给时间让你沉湎于此。而关注错误，可以让我们避免下次的失败，修正自己的缺点。</p><p>不过我知道，失败带给我负面的情绪，不那么容易消失。而改正错误也不能够马上带来下一次的成功，只是让自己少犯一个错误，当然可能还会出现其他错误。随便一想，就让人非常沮丧。从我这种思考的思路来看，我的的确确是一个非常看重结果而不太在意过程的人，或者至少是觉得结果远远重要于过程。当负面情绪在心里占据主导位置的时候，我不得不承认，自己很容易丧失理性的思考。</p><p>不过我相信，成长是一次次和自己的错误见面又告别的过程。不妨好好想想办法关注当下的错误。</p><ul><li>把自己的错误用一个记事本专门罗列出来，再犯的时候+1</li><li>对有意识克服弱点避免错误的，给错误次数-1</li><li>每天参考错误本反思自己的一天</li></ul><p>生活是一场修行，有时候不得不承认自己犯错时的愚蠢，不得不坦然面对失败的沮丧。希望未来自己可以更乐观地看待修正错误这件事情的积极意义。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;我最近在生活中遇到不少问题，也遭遇了不少的失败。这些失败导致我郁郁不乐。所以我写这篇文章想给自己梳理一下，给焦虑的内心解压。&lt;/p&gt;
&lt;p&gt;很显然，面对失败，理性的人应该选择关注错误而不是关注失败。虽然失败的确是一个让人难过的结果，但是生活并不一定给时间让你沉湎于此。而关注
      
    
    </summary>
    
    
    
      <category term="技术杂谈" scheme="http://yoursite.com/tags/%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/"/>
    
  </entry>
  
  <entry>
    <title>完全符合需求的轮子</title>
    <link href="http://yoursite.com/2020/03/05/%E4%B8%8D%E8%A6%81%E5%BF%99%E7%A2%8C%E4%BA%8E%E6%89%BE%E5%88%B0%E5%AE%8C%E5%85%A8%E5%90%88%E9%80%82%E7%9A%84%E8%BD%AE%E5%AD%90/"/>
    <id>http://yoursite.com/2020/03/05/%E4%B8%8D%E8%A6%81%E5%BF%99%E7%A2%8C%E4%BA%8E%E6%89%BE%E5%88%B0%E5%AE%8C%E5%85%A8%E5%90%88%E9%80%82%E7%9A%84%E8%BD%AE%E5%AD%90/</id>
    <published>2020-03-05T09:30:45.000Z</published>
    <updated>2020-03-05T11:14:32.075Z</updated>
    
    <content type="html"><![CDATA[<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>找不到完全合适的轮子要怎么办？如果发现一个开源依赖非常靠近你的需求，但是仅仅有一些地方不满足，无法使用，你会怎么选择？先说结论，我们可以大胆fork一份代码，然后根据自己的需求改造之后发布一个增强包给自己使用。</p><h2 id="理由"><a href="#理由" class="headerlink" title="理由"></a>理由</h2><ul><li>工作中难免遇到轮子差一点就能满足需求的情况</li><li>完全重新造轮子成本过高</li><li>修改原来的轮子的成本只是阅读源码和新功能测试</li><li>通过在社区提建议的方式难以快速响应业务需求</li></ul><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><p>之前我做一个cli工具优化的时候，需要使用yeoman的update-notifier包的功能进行依赖升级终端提醒，但是这个包有个缺点，就是只支持默认使用npm官方的registry。但是我的生产环境用到的registry又恰恰是基于cnpm搭建的私有registry。</p><p>很自然，摆在我面前有两个方案</p><ol><li>参考update-notifier思路自己写一个新轮子</li><li>给update-notifier加一个option，支持registry传参</li></ol><p>碰巧我当时发现团队内也有同学遇到这个需求，他是直接手写方法实现了这个需求。只是我知道有update-notifier这个包，基于这个情况一看便知道，肯定是第二个方案成本最低。那为什么会有第一个方案的出现呢？有时候难免在社区轮子不满足需求的情况下，会放弃搜索而选择自己实现，有时候这是一个不错的选择，因为很有可能你的需求是多个依赖东拼西凑才能解决的。而我眼前的需求很清晰，只是增加一个registry参数的问题，那就要果断去用第二个方案解决问题。</p><p>定下方案之后，我付出的时间也很少。只是聚焦于update-notifier的retistry参数如何传递，而不用关心它核心原理（比较版本号并做出升级提示的主流程）。现在看来也是在工作中性价比很高的操作。</p><p>我已经将改动的代码上传到<a href="https://github.com/skyline-123/update-notifier/blob/master/index.js" target="_blank" rel="noopener">github</a>, 其实只要你想，总是可以让工作变得相对而言更轻松。</p><h2 id="归纳"><a href="#归纳" class="headerlink" title="归纳"></a>归纳</h2><p>遇到需求的时候，除了一把梭自己全部实现之外，我按解决问题的顺序排序了如下方案：</p><ol><li>找到合适的轮子，用它</li><li>找到部分合适的轮子，改它</li><li>找不到一个轮子能满足需求，造它</li></ol><p>我这篇文章的核心其实就是第二点，找到部分合适的轮子，改它。也就是上传一个增强包到自己的npm服务端的事情，开心去改造吧，没必要浪费时间去找所谓完美合适的轮子。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;思路&quot;&gt;&lt;a href=&quot;#思路&quot; class=&quot;headerlink&quot; title=&quot;思路&quot;&gt;&lt;/a&gt;思路&lt;/h2&gt;&lt;p&gt;找不到完全合适的轮子要怎么办？如果发现一个开源依赖非常靠近你的需求，但是仅仅有一些地方不满足，无法使用，你会怎么选择？先说结论，我们可以大胆
      
    
    </summary>
    
    
    
      <category term="技术杂谈" scheme="http://yoursite.com/tags/%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/"/>
    
  </entry>
  
  <entry>
    <title>关于去掉博客评论区</title>
    <link href="http://yoursite.com/2020/03/03/%E5%85%B3%E4%BA%8E%E5%8E%BB%E6%8E%89%E5%8D%9A%E5%AE%A2%E8%AF%84%E8%AE%BA%E5%8C%BA/"/>
    <id>http://yoursite.com/2020/03/03/%E5%85%B3%E4%BA%8E%E5%8E%BB%E6%8E%89%E5%8D%9A%E5%AE%A2%E8%AF%84%E8%AE%BA%E5%8C%BA/</id>
    <published>2020-03-03T12:10:55.000Z</published>
    <updated>2020-03-03T12:17:20.048Z</updated>
    
    <content type="html"><![CDATA[<p>为了增加评论区我花了一点时间找了hexo next主题支持的插件，但是现在我放弃之前花费的时间，选择关闭评论区。</p><p>可能阅读我博客的你还没发现这个功能已经下线了，那我下线评论区的作用也就达到了。我在乎的不是这个博客看起来要有血有肉像是一个博客，要有评论，要有访问量统计，要挂上buy me a coffee之类的二维码。当然，我也不是说这些功能不好，也不是想显得自己多么特立独行。我只是觉得时间宝贵，我更在乎的是我在记录，我在思考，我在前进。</p><p>真心想讨论问题，我相信也不会因为关闭评论而结束。再次谢谢老友们之前的评论支持～</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;为了增加评论区我花了一点时间找了hexo next主题支持的插件，但是现在我放弃之前花费的时间，选择关闭评论区。&lt;/p&gt;
&lt;p&gt;可能阅读我博客的你还没发现这个功能已经下线了，那我下线评论区的作用也就达到了。我在乎的不是这个博客看起来要有血有肉像是一个博客，要有评论，要有访问
      
    
    </summary>
    
    
    
      <category term="技术杂谈" scheme="http://yoursite.com/tags/%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/"/>
    
  </entry>
  
  <entry>
    <title>Lerna的version变更</title>
    <link href="http://yoursite.com/2020/03/02/Lerna%E7%9A%84version%E5%8F%98%E6%9B%B4/"/>
    <id>http://yoursite.com/2020/03/02/Lerna%E7%9A%84version%E5%8F%98%E6%9B%B4/</id>
    <published>2020-03-01T17:17:57.000Z</published>
    <updated>2020-03-01T17:35:57.831Z</updated>
    
    <content type="html"><![CDATA[<p>之前写了Lerna的使用感受文章，分享了Lerna的整体使用感受。而今天我处理了一个因为不熟悉Lerna导致的小问题，那我再来分享一下这个具体的使用案例。</p><h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>我们都知道（不知道你也假装现在知道了），Lerna会自动维护各个package的package.json文件的version变更。这里看上去非常智能，但是如果你的需求是要在其他地方（非package.json）同步这个version变更要如何处理呢？刚好工作中也遇到了这个问题，我们的模版文件的使用了ejs, 而package.json.ejs文件中的依赖版本号，是需要同步Lerna发布之后的版本号的。</p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>我们手动修改package.json.ejs依赖的版本号很长一段时间，但是这个动作明显不合理，所有能够交给代码去处理的事情不能手工完成。这个不仅仅是效率问题，更涉及到可靠性和稳定性。</p><p>不过事情的推进往往是出现问题之后，直到一次我们忘记手动更改这个依赖版本号之后，我就着手去处理这个问题。</p><p>这个归功于我之前有阅读过npm的部分源码，对preversion和version等npm自己的生命周期钩子有模糊的印象。我顺藤摸瓜，找到lerna version的文档，在最下面果然找到了lifecycle相关文档。lerna根目录的version script可以在lerna更改了packages文件之后执行。那思路就有了，只要我们写一个version.js的脚本，去替换package.json.ejs的版本号就行了。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>再简单的事情，都要重视，能自动化的都要交给机器。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;之前写了Lerna的使用感受文章，分享了Lerna的整体使用感受。而今天我处理了一个因为不熟悉Lerna导致的小问题，那我再来分享一下这个具体的使用案例。&lt;/p&gt;
&lt;h2 id=&quot;起因&quot;&gt;&lt;a href=&quot;#起因&quot; class=&quot;headerlink&quot; title=&quot;起因&quot;
      
    
    </summary>
    
    
    
      <category term="前端工程化" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96/"/>
    
      <category term="Lerna" scheme="http://yoursite.com/tags/Lerna/"/>
    
  </entry>
  
  <entry>
    <title>增加RSS订阅功能</title>
    <link href="http://yoursite.com/2020/01/21/%E5%A2%9E%E5%8A%A0RSS%E8%AE%A2%E9%98%85%E5%8A%9F%E8%83%BD/"/>
    <id>http://yoursite.com/2020/01/21/%E5%A2%9E%E5%8A%A0RSS%E8%AE%A2%E9%98%85%E5%8A%9F%E8%83%BD/</id>
    <published>2020-01-21T08:49:59.000Z</published>
    <updated>2020-01-29T10:59:34.341Z</updated>
    
    <content type="html"><![CDATA[<p>今天给自己的博客增加了RSS订阅功能，如果对我的博客有兴趣，欢迎使用RSS订阅获取最新文章。</p><p>同时呢，顺便讲讲自己为什么要加入这个RSS订阅功能，当然不仅仅是因为它看上去像是一个Blog的标配我就愿意主动加进去。</p><h2 id="RSS订阅的主动性"><a href="#RSS订阅的主动性" class="headerlink" title="RSS订阅的主动性"></a>RSS订阅的主动性</h2><p>使用RSS订阅，可以提高我们获取资讯的主动性。如果我们习惯于被动接收，比如刷信息流，刷短视频，我们总是会在宝贵的碎片时间错过高质量知识积累的机会。而使用RSS订阅，每一个源都可能是你精挑细选之后保留下来的，也是你长年累月增删改查之后沉淀下来的 。这种使用RSS订阅的方式，首先你得先去积累，善于发现，才能在自己的阅读器中添加自己认可的高质量源，这个过程就是一个主动积极的学习过程。当生活中各种各样的方便性降低我们大脑成本的时候，我们不要忘了主动性才是提高自身成长速度的关键。</p><h2 id="优质的RSS阅读器"><a href="#优质的RSS阅读器" class="headerlink" title="优质的RSS阅读器"></a>优质的RSS阅读器</h2><p>优质的RSS阅读器，提高了阅读体验，增加了阅读的专注力。同时RSS源的精选，本身也很大程度过滤了垃圾信息和垃圾广告的骚扰。</p><img src="/2020/01/21/%E5%A2%9E%E5%8A%A0RSS%E8%AE%A2%E9%98%85%E5%8A%9F%E8%83%BD/reeder.png" class="" title="reeder应用"><p>上图是我在macOS上面使用的Reeder阅读器，订阅的源相对较少，大部分订阅放在了手机。截图出来除了分享这个优秀的app，还想告诉大家，其实使用一款优质的RSS阅读器，一定程度上提高了自己的阅读幸福感。</p><p>优质的RSS阅读器给我们带来的可见亮点，总结下来主要是以下三点：</p><ul><li>专注</li><li>体验</li><li>高效</li></ul><p>信息大爆炸时代，多了太多需要我们自己过滤的垃圾信息。在选择阅读源上，我们先做好这一层过滤，就在我们阅读过程中大大减少了负担。RSS订阅只是一个更便捷高效的手段而已，核心还是主动获取知识。</p><h2 id="RSS源推荐"><a href="#RSS源推荐" class="headerlink" title="RSS源推荐"></a>RSS源推荐</h2><p>RSS源的聚合我只推荐一个站点：<a href="https://docs.rsshub.app/" target="_blank" rel="noopener">RSSHub</a>。也算是我使用这个站点的一点回馈吧。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天给自己的博客增加了RSS订阅功能，如果对我的博客有兴趣，欢迎使用RSS订阅获取最新文章。&lt;/p&gt;
&lt;p&gt;同时呢，顺便讲讲自己为什么要加入这个RSS订阅功能，当然不仅仅是因为它看上去像是一个Blog的标配我就愿意主动加进去。&lt;/p&gt;
&lt;h2 id=&quot;RSS订阅的主动性&quot;&gt;
      
    
    </summary>
    
    
    
      <category term="技术杂谈" scheme="http://yoursite.com/tags/%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/"/>
    
  </entry>
  
  <entry>
    <title>前端项目部署nginx基础配置参考</title>
    <link href="http://yoursite.com/2020/01/16/%E5%89%8D%E7%AB%AF%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2nginx%E5%9F%BA%E7%A1%80%E9%85%8D%E7%BD%AE%E5%8F%82%E8%80%83/"/>
    <id>http://yoursite.com/2020/01/16/%E5%89%8D%E7%AB%AF%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2nginx%E5%9F%BA%E7%A1%80%E9%85%8D%E7%BD%AE%E5%8F%82%E8%80%83/</id>
    <published>2020-01-16T11:46:21.000Z</published>
    <updated>2020-03-03T12:10:09.845Z</updated>
    
    <content type="html"><![CDATA[<p>前段时间，面试一些前端同学的时候，发现大部分对开发完成之后的部署流程都不太了解。听到最多的回答，都是npm run build之后交给后端或者前端负责人就可以了。虽然部署的过程不一定有机会参与，但是一定要做到心中有数，不然怎么能做到负责一整个前端项目呢？</p><p>趁着有空，简单写下前端部署时候用到的最基础的nginx配置参考。这里以vue的spa项目作为例子。</p><h2 id="配置分类"><a href="#配置分类" class="headerlink" title="配置分类"></a>配置分类</h2><p>根据vue-router的mode，分成两种情况：</p><ul><li>hash</li><li>history</li></ul><p>同时根据部署的路径，也分成两种情况：</p><ul><li>根路径</li><li>非根路径</li></ul><p>我们假设dist文件夹放在/data/www/demo/dist, server_name是localhost。</p><a id="more"></a><h3 id="hash模式（根路径）"><a href="#hash模式（根路径）" class="headerlink" title="hash模式（根路径）"></a>hash模式（根路径）</h3><p><strong>nginx 配置</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">  server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name localhost;</span><br><span class="line">    location &#x2F; &#123;</span><br><span class="line">      root &#x2F;data&#x2F;www&#x2F;demo&#x2F;dist;</span><br><span class="line">      index index.html;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="hash模式（非根路径）"><a href="#hash模式（非根路径）" class="headerlink" title="hash模式（非根路径）"></a>hash模式（非根路径）</h3><p><strong>nginx 配置</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">  server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name localhost;</span><br><span class="line">    location ^~ &#x2F;demo &#123;</span><br><span class="line">      alias &#x2F;data&#x2F;www&#x2F;demo&#x2F;dist;</span><br><span class="line">      index index.html;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>vue.config.js配置</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  publicPath: <span class="string">'/demo'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="history模式（根路径）"><a href="#history模式（根路径）" class="headerlink" title="history模式（根路径）"></a>history模式（根路径）</h3><p><strong>nginx 配置</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">  server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name localhost;</span><br><span class="line">    location &#x2F; &#123;</span><br><span class="line">      root  &#x2F;data&#x2F;www&#x2F;demo&#x2F;dist;</span><br><span class="line">      index index.html;</span><br><span class="line">      try_files $uri $uri&#x2F; &#x2F;index.html;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="history模式（非根路径）"><a href="#history模式（非根路径）" class="headerlink" title="history模式（非根路径）"></a>history模式（非根路径）</h3><p><strong>nginx 配置</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">  server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name localhost;</span><br><span class="line">    location ^~ &#x2F;demo &#123;</span><br><span class="line">      alias &#x2F;data&#x2F;www&#x2F;demo&#x2F;dist;</span><br><span class="line">      index index.html;</span><br><span class="line">      try_files $uri $uri&#x2F; &#x2F;demo&#x2F;index.html;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>vue.config.js配置</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  publicPath: <span class="string">'/demo'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>router配置</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  mode: <span class="string">'history'</span>,</span><br><span class="line">  base: <span class="string">'demo'</span>,</span><br><span class="line">  routes <span class="comment">// (缩写) 相当于 routes: routes</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>不要把<strong>术业有专攻</strong>作为不愿走出舒适圈的借口，与诸君共勉。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前段时间，面试一些前端同学的时候，发现大部分对开发完成之后的部署流程都不太了解。听到最多的回答，都是npm run build之后交给后端或者前端负责人就可以了。虽然部署的过程不一定有机会参与，但是一定要做到心中有数，不然怎么能做到负责一整个前端项目呢？&lt;/p&gt;
&lt;p&gt;趁着有空，简单写下前端部署时候用到的最基础的nginx配置参考。这里以vue的spa项目作为例子。&lt;/p&gt;
&lt;h2 id=&quot;配置分类&quot;&gt;&lt;a href=&quot;#配置分类&quot; class=&quot;headerlink&quot; title=&quot;配置分类&quot;&gt;&lt;/a&gt;配置分类&lt;/h2&gt;&lt;p&gt;根据vue-router的mode，分成两种情况：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;hash&lt;/li&gt;
&lt;li&gt;history&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;同时根据部署的路径，也分成两种情况：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;根路径&lt;/li&gt;
&lt;li&gt;非根路径&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我们假设dist文件夹放在/data/www/demo/dist, server_name是localhost。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="nginx" scheme="http://yoursite.com/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>gulp系列之undertaker源码笔记</title>
    <link href="http://yoursite.com/2020/01/13/gulp%E7%B3%BB%E5%88%97%E4%B9%8Bundertaker%E6%BA%90%E7%A0%81%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2020/01/13/gulp%E7%B3%BB%E5%88%97%E4%B9%8Bundertaker%E6%BA%90%E7%A0%81%E7%AC%94%E8%AE%B0/</id>
    <published>2020-01-13T12:32:19.000Z</published>
    <updated>2020-01-29T10:59:34.338Z</updated>
    
    <content type="html"><![CDATA[<p>undertaker部分的代码，是gulp任务管理部分的核心源码。在讲解gulp本身仓库源码之前，我着重讲讲undertaker。这个库自然也涉及到一些依赖，没关系，这次我们关注undertaker流程本身。</p><p>请泡好🍵或者☕️慢慢看，这篇文章篇幅较长。算是回应某些朋友对我的博客期待吧，他们觉得我一开始写的文章太水了。</p><h2 id="undertaker简介"><a href="#undertaker简介" class="headerlink" title="undertaker简介"></a>undertaker简介</h2><p>undertaker是gulp团队开发出来为解决gulp的任务执行问题的库。</p><blockquote><p>Task registry that allows composition through series/parallel methods.</p></blockquote><p>undertaker提供series和parallel两种方法解决任务流程管理。series是串行执行任务，parallel方法是并行执行任务。串行执行应该比较简单理解，就是按顺序执行，只有前面的任务完成，后面的任务才能执行。那么并行呢？很可能是通过for循环执行所有异步任务，这样就能实现并行，这个类似Promise.all方法。</p><p>我非常赞叹undertaker的设计，可能是我对代码流程管理本身没有很好的思路，看了之后豁然开朗。想想javascript，异步代码从callback，写到promise，写到generator，写到async/await。异步代码的书写随着时间的推移变得越来越友好，但是比如Promise的实现思想，更加值得我们学习和思考。回到undertaker，这个任务管理的框架，其实就是非常友好地解决了处理串行或者并行任务的代码组织问题。通过undertaker书写的代码可读性和可维护性都很强。</p><p>之前写到复杂业务流程的时候，串行或者并行的时候，直接用Promise，总感觉有所欠缺，现在看了undertaker，有一种亲切的感觉，那就是这种实现就是我写流程管理需要的非常好的实践模板。</p><a id="more"></a><h2 id="undertaker用法"><a href="#undertaker用法" class="headerlink" title="undertaker用法"></a>undertaker用法</h2><h3 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h3><p>这里就不废话了，直接复制undertaker的readme:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">var</span> Undertaker = <span class="built_in">require</span>(<span class="string">'undertaker'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> taker = <span class="keyword">new</span> Undertaker();</span><br><span class="line"></span><br><span class="line">taker.task(<span class="string">'task1'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">cb</span>)</span>&#123;</span><br><span class="line">  <span class="comment">// do things</span></span><br><span class="line"></span><br><span class="line">  cb(); <span class="comment">// when everything is done</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">taker.task(<span class="string">'task2'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> fs.createReadStream(<span class="string">'./myFile.js'</span>)</span><br><span class="line">    .pipe(fs.createWriteStream(<span class="string">'./myFile.copy.js'</span>));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">taker.task(<span class="string">'task3'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// do things</span></span><br><span class="line"></span><br><span class="line">    resolve(); <span class="comment">// when everything is done</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">taker.task(<span class="string">'combined'</span>, taker.series(<span class="string">'task1'</span>, <span class="string">'task2'</span>));</span><br><span class="line"></span><br><span class="line">taker.task(<span class="string">'all'</span>, taker.parallel(<span class="string">'combined'</span>, <span class="string">'task3'</span>));</span><br></pre></td></tr></table></figure><p>在分析源码之前，我简单从用法这里说说undertaker。</p><p>简单总结方法如下：</p><ul><li>Undertaker.task</li><li>Undertaker.series</li><li>Undertaker.parallel</li></ul><p>Undertaker.task看上去是注册task，每个task name对应一个需要执行的方法。同时，Undertaker.task应该也会返回一个函数，以供其嵌套使用。Undertaker.series和Undertaker.parallel就从名字上可以看出是串行和并行执行任务的方法，同时也推断出会返回一个函数。</p><h3 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h3><p>既然对于用法我做了简单的分析，也稍微扩展一下源码阅读的问题。专注undertaker源码解析的同学可以<strong>跳过</strong>这部分。</p><p>有同事不久前问我，需要怎么阅读源代码。其实这个方法因人而异，每个人在探索的过程中肯定都会得出适合自己的方法。我的方法就是先根据api或者说usage去揣测这个库的可能实现，尤其关注参数和输出。</p><p>通过自己的思考反推实现，是一个非常好的思维锻炼过程。你可能会发现自己能猜测出大概的实现思路，又或者毫无头绪，这个前置的思考和预习功课有着类似的功效，就是能帮你很好的衔接实际阅读源码过程中的思索。</p><p>也有同事曾经问我，如果有很多依赖，要怎么阅读源码？这个其实是阅读源码过程中肯定会遇到的问题，这个很简单，直接去依赖包中看readme，了解简介知道它做什么就足够了，然后注意力集中在主流程。如果主流程的关键代码就在依赖中，那也很简单啊，看依赖的源码就完事了。如果依赖多到记不清每个依赖是做什么的，那你又想研究，就做一个表格把核心依赖的描述都登记起来用来查询就好。</p><h2 id="undertaker主流程分析"><a href="#undertaker主流程分析" class="headerlink" title="undertaker主流程分析"></a>undertaker主流程分析</h2><h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><p>老办法，先看看目录结构。注：为了方便阅读，直接取node_modules里面的依赖代码，忽略test文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">.&#x2F;node_modules&#x2F;undertaker</span><br><span class="line">├── LICENSE</span><br><span class="line">├── README.md</span><br><span class="line">├── index.js</span><br><span class="line">├── lib</span><br><span class="line">│   ├── get-task.js</span><br><span class="line">│   ├── helpers</span><br><span class="line">│   │   ├── buildTree.js</span><br><span class="line">│   │   ├── createExtensions.js</span><br><span class="line">│   │   ├── metadata.js</span><br><span class="line">│   │   ├── normalizeArgs.js</span><br><span class="line">│   │   └── validateRegistry.js</span><br><span class="line">│   ├── last-run.js</span><br><span class="line">│   ├── parallel.js</span><br><span class="line">│   ├── registry.js</span><br><span class="line">│   ├── series.js</span><br><span class="line">│   ├── set-task.js</span><br><span class="line">│   ├── task.js</span><br><span class="line">│   └── tree.js</span><br><span class="line">└── package.json</span><br><span class="line"></span><br><span class="line">2 directories, 17 files</span><br></pre></td></tr></table></figure><p>从api出发，我就很快找到了我感兴趣的文件。</p><ul><li>set-task.js</li><li>get-task.js</li><li>task.js</li><li>parallel.js</li><li>series.js</li></ul><p>文件很多，但是我大胆猜测上面五个文件是我需要重点关注的，其他文件都是辅助参考。反正猜错了也不亏，😄。</p><h3 id="入口文件-index-js"><a href="#入口文件-index-js" class="headerlink" title="入口文件(index.js)"></a>入口文件(index.js)</h3><p>猜测归猜测，学习还是得老老实实从入口文件看起。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> inherits = <span class="built_in">require</span>(<span class="string">'util'</span>).inherits;</span><br><span class="line"><span class="keyword">var</span> EventEmitter = <span class="built_in">require</span>(<span class="string">'events'</span>).EventEmitter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> DefaultRegistry = <span class="built_in">require</span>(<span class="string">'undertaker-registry'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> tree = <span class="built_in">require</span>(<span class="string">'./lib/tree'</span>);</span><br><span class="line"><span class="keyword">var</span> task = <span class="built_in">require</span>(<span class="string">'./lib/task'</span>);</span><br><span class="line"><span class="keyword">var</span> series = <span class="built_in">require</span>(<span class="string">'./lib/series'</span>);</span><br><span class="line"><span class="keyword">var</span> lastRun = <span class="built_in">require</span>(<span class="string">'./lib/last-run'</span>);</span><br><span class="line"><span class="keyword">var</span> parallel = <span class="built_in">require</span>(<span class="string">'./lib/parallel'</span>);</span><br><span class="line"><span class="keyword">var</span> registry = <span class="built_in">require</span>(<span class="string">'./lib/registry'</span>);</span><br><span class="line"><span class="keyword">var</span> _getTask = <span class="built_in">require</span>(<span class="string">'./lib/get-task'</span>);</span><br><span class="line"><span class="keyword">var</span> _setTask = <span class="built_in">require</span>(<span class="string">'./lib/set-task'</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Undertaker</span>(<span class="params">customRegistry</span>) </span>&#123;</span><br><span class="line">  EventEmitter.call(<span class="keyword">this</span>); <span class="comment">// 继承EventEmitter</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>._registry = <span class="keyword">new</span> DefaultRegistry(); <span class="comment">// 猜测是存储tasks的对象</span></span><br><span class="line">  <span class="keyword">if</span> (customRegistry) &#123; <span class="comment">// 如果有customRegistry，应用customRegistry</span></span><br><span class="line">    <span class="keyword">this</span>.registry(customRegistry);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>._settle = (process.env.UNDERTAKER_SETTLE === <span class="string">'true'</span>); <span class="comment">// 姑且看作某个叫做UNDERTAKER_SETTLE的开关，具体作用要看后面的源码</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">inherits(Undertaker, EventEmitter); <span class="comment">// 继承EventEmitter原型链方法</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Undertaker.prototype.tree = tree;</span><br><span class="line"></span><br><span class="line">Undertaker.prototype.task = task;</span><br><span class="line"></span><br><span class="line">Undertaker.prototype.series = series;</span><br><span class="line"></span><br><span class="line">Undertaker.prototype.lastRun = lastRun;</span><br><span class="line"></span><br><span class="line">Undertaker.prototype.parallel = parallel;</span><br><span class="line"></span><br><span class="line">Undertaker.prototype.registry = registry;</span><br><span class="line"></span><br><span class="line">Undertaker.prototype._getTask = _getTask;</span><br><span class="line"></span><br><span class="line">Undertaker.prototype._setTask = _setTask;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = Undertaker;</span><br></pre></td></tr></table></figure><p>入口文件来看</p><ol><li>Undertaker继承自EventEmitter</li><li>同时内部有一个_registry对象（可以自定义，猜测是用来存储tasks的对象)</li><li>prototype上面绑定了很多方法或者属性，还是按照api倒推的方法，我挑选task, _getTask, _setTask, series, parallel重点关注</li></ol><h3 id="task-lib-task-js"><a href="#task-lib-task-js" class="headerlink" title="task(lib/task.js)"></a>task(lib/task.js)</h3><p>首先看看这个task，到底是如何实现的呢？</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">task</span>(<span class="params">name, fn</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> name === <span class="string">'function'</span>) &#123; <span class="comment">// 如果参数只是一个函数，自动获取Function.displayName或者Function.name作为name</span></span><br><span class="line">    fn = name;</span><br><span class="line">    name = fn.displayName || fn.name;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!fn) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>._getTask(name); <span class="comment">// 如果参数没有传入fn，用_getTask获取name</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>._setTask(name, fn); <span class="comment">// 如果name和fn都有，那么用_setTask设置，估计是存储到registry对象</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = task;</span><br></pre></td></tr></table></figure><p>总结一下，task方法其实就是封装了Undertaker.prototype._getTask和Undertaker.prototype._setTask方法。</p><h3 id="get-task-lib-get-task-js"><a href="#get-task-lib-get-task-js" class="headerlink" title="get-task(lib/get-task.js)"></a>get-task(lib/get-task.js)</h3><p>继续看看这个get-task，👌，看名字，大家应该都猜得到大概了。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>._registry.get(name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="keyword">get</span>;</span><br></pre></td></tr></table></figure><p>这个就不用解释了，和猜想一致，_registry是用来存储tasks的对象。_getTask就是获取对应的task。</p><h3 id="set-task-lib-set-task-js"><a href="#set-task-lib-set-task-js" class="headerlink" title="set-task(lib/set-task.js)"></a>set-task(lib/set-task.js)</h3><p>顺势看到set-task，耐心点继续看看：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> assert = <span class="built_in">require</span>(<span class="string">'assert'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> metadata = <span class="built_in">require</span>(<span class="string">'./helpers/metadata'</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">set</span>(<span class="params">name, fn</span>) </span>&#123;</span><br><span class="line">  assert(name, <span class="string">'Task name must be specified'</span>); <span class="comment">// 参数检验</span></span><br><span class="line">  assert(<span class="keyword">typeof</span> name === <span class="string">'string'</span>, <span class="string">'Task name must be a string'</span>); <span class="comment">// 参数检验</span></span><br><span class="line">  assert(<span class="keyword">typeof</span> fn === <span class="string">'function'</span>, <span class="string">'Task function must be specified'</span>); <span class="comment">// 参数检验</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">taskWrapper</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> fn.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>); <span class="comment">// 执行task，绑定this, 执行taskWrapper，等于执行绑定了当前上下文的fn</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">unwrap</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> fn; <span class="comment">// 直接返回fn</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  taskWrapper.unwrap = unwrap; <span class="comment">// 把unwrap绑定到taskWrapper函数的属性</span></span><br><span class="line">  taskWrapper.displayName = name; <span class="comment">// 把name绑定到taskWrapper的displayName属性。不过现在displayName已经是非标准的属性了，https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/displayName</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> meta = metadata.get(fn) || &#123;&#125;; <span class="comment">// 咋一看不知道干啥的，不怕，我直接跳过</span></span><br><span class="line">  <span class="keyword">var</span> nodes = []; <span class="comment">// 咋一看不知道干啥的，不怕，我直接跳过</span></span><br><span class="line">  <span class="keyword">if</span> (meta.branch) &#123;</span><br><span class="line">    nodes.push(meta.tree); <span class="comment">// // 咋一看不知道干啥的，不怕，我直接跳过</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> task = <span class="keyword">this</span>._registry.set(name, taskWrapper) || taskWrapper; <span class="comment">// 通过_registry设置name属性为taskWrapper，如果返回为空，task使用taskWrapper替代</span></span><br><span class="line"></span><br><span class="line">  metadata.set(task, &#123;</span><br><span class="line">    name: name,</span><br><span class="line">    orig: fn,</span><br><span class="line">    tree: &#123;</span><br><span class="line">      label: name,</span><br><span class="line">      type: <span class="string">'task'</span>,</span><br><span class="line">      nodes: nodes,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;); <span class="comment">// 咋一看不知道干啥的，不怕，我直接跳过。但是我可以猜测metadata是保存一些元数据信息，姑且猜测是用来获取task之间的依赖关系。</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="keyword">set</span>;</span><br></pre></td></tr></table></figure><p>_setTask方法稍微复杂一点，多了metadata相关的东西。不知道具体做什么的，没什么关系，不影响我们专注看自己感兴趣的主流程。敲黑板，看源码看到大概率是分支流程的东西，千万别慌，大概率是可以不关注也不影响主流程的内容。</p><h3 id="series-lib-series-js"><a href="#series-lib-series-js" class="headerlink" title="series(lib/series.js)"></a>series(lib/series.js)</h3><p>好的，总算来到核心代码部分。话不多说，看代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> bach = <span class="built_in">require</span>(<span class="string">'bach'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> metadata = <span class="built_in">require</span>(<span class="string">'./helpers/metadata'</span>);</span><br><span class="line"><span class="keyword">var</span> buildTree = <span class="built_in">require</span>(<span class="string">'./helpers/buildTree'</span>);</span><br><span class="line"><span class="keyword">var</span> normalizeArgs = <span class="built_in">require</span>(<span class="string">'./helpers/normalizeArgs'</span>);</span><br><span class="line"><span class="keyword">var</span> createExtensions = <span class="built_in">require</span>(<span class="string">'./helpers/createExtensions'</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">series</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> create = <span class="keyword">this</span>._settle ? bach.settleSeries : bach.series; <span class="comment">// 根据UNDERTAKER_SETTLE开关选择create函数，这里涉及到bach库，看上去series的核心方法和它有关，怎么办？待会直接翻出来看。</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> args = normalizeArgs(<span class="keyword">this</span>._registry, <span class="built_in">arguments</span>); <span class="comment">// 将arguments扁平化之后获取对应的task function。helpers里面的源码比较简单，不细讲。</span></span><br><span class="line">  <span class="keyword">var</span> extensions = createExtensions(<span class="keyword">this</span>); <span class="comment">// 创建扩展，包含create, before, after, error生命周期方法</span></span><br><span class="line">  <span class="keyword">var</span> fn = create(args, extensions); <span class="comment">// 待会讲解bach的时候分析create方法</span></span><br><span class="line">  <span class="keyword">var</span> name = <span class="string">'&lt;series&gt;'</span>;</span><br><span class="line"></span><br><span class="line">  metadata.set(fn, &#123; <span class="comment">// 咋一看不知道干啥的，不怕，我直接跳过。但是我可以猜测metadata是保存一些元数据信息。</span></span><br><span class="line">    name: name,</span><br><span class="line">    branch: <span class="literal">true</span>,</span><br><span class="line">    tree: &#123;</span><br><span class="line">      label: name,</span><br><span class="line">      type: <span class="string">'function'</span>,</span><br><span class="line">      branch: <span class="literal">true</span>,</span><br><span class="line">      nodes: buildTree(args),</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> fn; <span class="comment">// 返回create之后的函数</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = series;</span><br></pre></td></tr></table></figure><h3 id="bach库"><a href="#bach库" class="headerlink" title="bach库"></a>bach库</h3><p>OK，我们看源码到series方法的时候，发现被bach库的源码阻塞了，而且显然是核心逻辑。不用犹豫，直接深入进入了解下原理。从节奏上来说，这部分分析理应拆多一篇文章。但是为了分享自己阅读源码时候的思路和细节，不妨直接贯穿下来。</p><p>同样的，我们看下bach的简介和用法：</p><blockquote><p>Compose your async functions with elegance.</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> bach = <span class="built_in">require</span>(<span class="string">'bach'</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params">cb</span>) </span>&#123;</span><br><span class="line">  cb(<span class="literal">null</span>, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn2</span>(<span class="params">cb</span>) </span>&#123;</span><br><span class="line">  cb(<span class="literal">null</span>, <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn3</span>(<span class="params">cb</span>) </span>&#123;</span><br><span class="line">  cb(<span class="literal">null</span>, <span class="number">3</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> seriesFn = bach.series(fn1, fn2, fn3);</span><br><span class="line"><span class="comment">// fn1, fn2, and fn3 will be run in series</span></span><br><span class="line">seriesFn(<span class="function"><span class="keyword">function</span>(<span class="params">err, res</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123; <span class="comment">// in this example, err is undefined</span></span><br><span class="line">    <span class="comment">// handle error</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// handle results</span></span><br><span class="line">  <span class="comment">// in this example, res is [1, 2, 3]</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> parallelFn = bach.parallel(fn1, fn2, fn3);</span><br><span class="line"><span class="comment">// fn1, fn2, and fn3 will be run in parallel</span></span><br><span class="line">parallelFn(<span class="function"><span class="keyword">function</span>(<span class="params">err, res</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123; <span class="comment">// in this example, err is undefined</span></span><br><span class="line">    <span class="comment">// handle error</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// handle results</span></span><br><span class="line">  <span class="comment">// in this example, res is [1, 2, 3]</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>其实看了简介和用法就知道了，bach就是负责undertaker的任务串行或者并行执行的核心库。</p><p>接下来看看目录结构：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">.&#x2F;node_modules&#x2F;bach</span><br><span class="line">├── LICENSE</span><br><span class="line">├── README.md</span><br><span class="line">├── index.js</span><br><span class="line">├── lib</span><br><span class="line">│   ├── helpers.js</span><br><span class="line">│   ├── parallel.js</span><br><span class="line">│   ├── series.js</span><br><span class="line">│   ├── settleParallel.js</span><br><span class="line">│   └── settleSeries.js</span><br><span class="line">└── package.json</span><br><span class="line"></span><br><span class="line">1 directory, 9 files</span><br></pre></td></tr></table></figure><p>入口文件就不说了，只是暴露lib里面的函数。<br>我们先讲series.js和settleSeries.js，这个和前面的series(lib/series.js)关联最大。</p><p>series.js如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> initial = <span class="built_in">require</span>(<span class="string">'array-initial'</span>);</span><br><span class="line"><span class="keyword">var</span> last = <span class="built_in">require</span>(<span class="string">'array-last'</span>);</span><br><span class="line"><span class="keyword">var</span> asyncDone = <span class="built_in">require</span>(<span class="string">'async-done'</span>);</span><br><span class="line"><span class="keyword">var</span> nowAndLater = <span class="built_in">require</span>(<span class="string">'now-and-later'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> helpers = <span class="built_in">require</span>(<span class="string">'./helpers'</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">iterator</span>(<span class="params">fn, key, cb</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> asyncDone(fn, cb); <span class="comment">// 通过callback方式统一处理异步函数</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">buildSeries</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> args = helpers.verifyArguments(<span class="built_in">arguments</span>); <span class="comment">// 验证arguments</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> extensions = helpers.getExtensions(last(args)); <span class="comment">// 获取extensions参数</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (extensions) &#123;</span><br><span class="line">    args = initial(args); <span class="comment">// 如果有extensions，arguments为排除extensions的那些</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">series</span>(<span class="params">done</span>) </span>&#123;</span><br><span class="line">    nowAndLater.mapSeries(args, iterator, extensions, done); <span class="comment">// 通过nowAndLater真正实现series串行执行</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> series; <span class="comment">// 返回series供使用</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = buildSeries;</span><br></pre></td></tr></table></figure><p>通过阅读series.js方法，发现离series串行执行的谜底还是隔着一层nowAndLater的面纱。不知道你有没有觉得要失去信心了，我反正是没有，因为还没打破沙锅问到底，不能轻易放弃。我阅读源码的过程如今在这里分享出来，带你克服内心恐惧。咬咬牙，继续看看nowAndLater是何方神圣。</p><h3 id="now-and-later库"><a href="#now-and-later库" class="headerlink" title="now-and-later库"></a>now-and-later库</h3><p>事到如今，已经不想看nowAndLater的简介了，我只知道，他的mapSeries和series的谜底很靠近了额，让我们直接看看mapSeries.js的代码结束战斗！</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> once = <span class="built_in">require</span>(<span class="string">'once'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> helpers = <span class="built_in">require</span>(<span class="string">'./helpers'</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mapSeries</span>(<span class="params">values, iterator, extensions, done</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// Allow for extensions to not be specified</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> extensions === <span class="string">'function'</span>) &#123;</span><br><span class="line">    done = extensions;</span><br><span class="line">    extensions = &#123;&#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Handle no callback case</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> done !== <span class="string">'function'</span>) &#123;</span><br><span class="line">    done = helpers.noop;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  done = once(done);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Will throw if non-object</span></span><br><span class="line">  <span class="keyword">var</span> keys = <span class="built_in">Object</span>.keys(values); <span class="comment">// 获取values的key值数组</span></span><br><span class="line">  <span class="keyword">var</span> length = keys.length;</span><br><span class="line">  <span class="keyword">var</span> idx = <span class="number">0</span>;</span><br><span class="line">  <span class="comment">// Return the same type as passed in</span></span><br><span class="line">  <span class="keyword">var</span> results = helpers.initializeResults(values); <span class="comment">// 初始化result</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> exts = helpers.defaultExtensions(extensions); <span class="comment">// 获取生命周期相关的集合</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (length === <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> done(<span class="literal">null</span>, results);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> key = keys[idx]; <span class="comment">// 递归开始的key</span></span><br><span class="line">  next(key); <span class="comment">// 开始执行next</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">next</span>(<span class="params">key</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> value = values[key]; <span class="comment">// 获取当前value</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> storage = exts.create(value, key) || &#123;&#125;; <span class="comment">// 执行exts的create生命周期</span></span><br><span class="line"></span><br><span class="line">    exts.before(storage); <span class="comment">// 执行exts的before的生命周期</span></span><br><span class="line">    iterator(value, key, once(handler)); <span class="comment">//执行iterator，同时传递只执行一次的handler作为回调</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">handler</span>(<span class="params">err, result</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        exts.error(err, storage); <span class="comment">// 如果报错，执行error的生命周期</span></span><br><span class="line">        <span class="keyword">return</span> done(err, results); <span class="comment">// 执行done函数，同时结束递归</span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      exts.after(result, storage); <span class="comment">// 如果没有err，则执行生命周期的after钩子</span></span><br><span class="line">      results[key] = result; <span class="comment">// results中保存result</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (++idx &gt;= length) &#123;</span><br><span class="line">        done(err, results); <span class="comment">// 如果结束了，调用done</span></span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        next(keys[idx]); <span class="comment">// 如果没有结束，调用next，继续递归操作</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = mapSeries;</span><br></pre></td></tr></table></figure><p>呼，松了一口气，bach和nowAndLater连起来看，总算清晰串行执行的原理了。同时有一个async-done库我只是一笔带过，感兴趣可以自己看看，它把不同风格的异步代码统一成callback的方式。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">iterator</span>(<span class="params">fn, key, cb</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> asyncDone(fn, cb); <span class="comment">// 通过callback方式统一处理异步函数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有了这一步，iterator在执行过程中，才能保证异步函数成功之后执行下一个函数。这就是一整个串行执行的原理了。</p><h3 id="接下来"><a href="#接下来" class="headerlink" title="接下来"></a>接下来</h3><p>接下来是不是轮到要讲解parallel的实现了呢？😄，都已经看我写到这里了，是不是有思路去自己阅读parallel的实现了呢？加油，相信你可以做到的。</p><p>简单来说，parallel把所有需要执行的函数都改成异步执行的方式，通过for循环去执行，就做到了并行执行代码。</p><p>同时如果你对最开始我没有详细讲解的metadata有兴趣，也可以自己去了解。不是偷懒，开头已经说了，我们关注undertaker流程本身，对于分支流程，有余力的同学自己探索吧。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>undertaker这个任务管理库非常优雅，可以很好的组合异步任务，通过并行或者串行的方式执行一个任务流程。我也曾经遇到相对复杂的流程控制代码，当时写完之后是一个头两个大。undertaker通过很多黑魔法，抹平多个异步任务组合的问题，让我们更加专注管理流程本身，而不是关注于怎么解决各种异步代码组合。</p><p>这篇文，一半是为了总结undertaker的源码，一半是分享下我的阅读源码思路。我也一样会面对下面的问题。</p><ul><li>依赖非常多</li><li>分支代码看不懂</li><li>阅读过程忘记前面的代码</li></ul><p>相信这些问题的答案，认真看过本文的你都能找到一些参考和解答。希望新的一年我们永远年轻，永远乐于探索，善于学习总结！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;undertaker部分的代码，是gulp任务管理部分的核心源码。在讲解gulp本身仓库源码之前，我着重讲讲undertaker。这个库自然也涉及到一些依赖，没关系，这次我们关注undertaker流程本身。&lt;/p&gt;
&lt;p&gt;请泡好🍵或者☕️慢慢看，这篇文章篇幅较长。算是回应某些朋友对我的博客期待吧，他们觉得我一开始写的文章太水了。&lt;/p&gt;
&lt;h2 id=&quot;undertaker简介&quot;&gt;&lt;a href=&quot;#undertaker简介&quot; class=&quot;headerlink&quot; title=&quot;undertaker简介&quot;&gt;&lt;/a&gt;undertaker简介&lt;/h2&gt;&lt;p&gt;undertaker是gulp团队开发出来为解决gulp的任务执行问题的库。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Task registry that allows composition through series/parallel methods.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;undertaker提供series和parallel两种方法解决任务流程管理。series是串行执行任务，parallel方法是并行执行任务。串行执行应该比较简单理解，就是按顺序执行，只有前面的任务完成，后面的任务才能执行。那么并行呢？很可能是通过for循环执行所有异步任务，这样就能实现并行，这个类似Promise.all方法。&lt;/p&gt;
&lt;p&gt;我非常赞叹undertaker的设计，可能是我对代码流程管理本身没有很好的思路，看了之后豁然开朗。想想javascript，异步代码从callback，写到promise，写到generator，写到async/await。异步代码的书写随着时间的推移变得越来越友好，但是比如Promise的实现思想，更加值得我们学习和思考。回到undertaker，这个任务管理的框架，其实就是非常友好地解决了处理串行或者并行任务的代码组织问题。通过undertaker书写的代码可读性和可维护性都很强。&lt;/p&gt;
&lt;p&gt;之前写到复杂业务流程的时候，串行或者并行的时候，直接用Promise，总感觉有所欠缺，现在看了undertaker，有一种亲切的感觉，那就是这种实现就是我写流程管理需要的非常好的实践模板。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="gulp" scheme="http://yoursite.com/tags/gulp/"/>
    
  </entry>
  
  <entry>
    <title>gulp系列之vinyl源码笔记</title>
    <link href="http://yoursite.com/2020/01/07/gulp%E7%B3%BB%E5%88%97%E4%B9%8Bvinyl%E6%BA%90%E7%A0%81%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2020/01/07/gulp%E7%B3%BB%E5%88%97%E4%B9%8Bvinyl%E6%BA%90%E7%A0%81%E7%AC%94%E8%AE%B0/</id>
    <published>2020-01-07T03:18:46.000Z</published>
    <updated>2020-01-29T10:59:34.339Z</updated>
    
    <content type="html"><![CDATA[<h2 id="vinyl简介"><a href="#vinyl简介" class="headerlink" title="vinyl简介"></a>vinyl简介</h2><p>vinyl是gulp团队维护的一个虚拟文件格式库。Vinyl对象，主要包括path和contents属性，是一个描述文件的元数据对象。</p><h2 id="vinyl用法"><a href="#vinyl用法" class="headerlink" title="vinyl用法"></a>vinyl用法</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Vinyl = <span class="built_in">require</span>(<span class="string">'vinyl'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> jsFile = <span class="keyword">new</span> Vinyl(&#123;</span><br><span class="line">  cwd: <span class="string">'/'</span>, 工作目录</span><br><span class="line">  base: <span class="string">'/test/'</span>, base路径</span><br><span class="line">  path: <span class="string">'/test/file.js'</span>, <span class="comment">//</span></span><br><span class="line">  contents: <span class="keyword">new</span> Buffer(<span class="string">'var x = 123'</span>)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="vinyl源码"><a href="#vinyl源码" class="headerlink" title="vinyl源码"></a>vinyl源码</h2><p>总共300多行，老方法，我们先看看代码总体的结构：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">构造函数</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">File</span> (<span class="params">file</span>) </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line">File.prototype.isBuffer = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;;</span><br><span class="line">File.prototype.isStream = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;;</span><br><span class="line">File.prototype.isNull = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;;</span><br><span class="line">File.prototype.isDirectory = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;;</span><br><span class="line">File.prototype.isSymbolic = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;;</span><br><span class="line">File.prototype.clone = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;;</span><br><span class="line">File.prototype.inspect = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;;</span><br><span class="line">...</span><br><span class="line">File.isCustomProp = <span class="function"><span class="keyword">function</span> (<span class="params">key</span>) </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;;</span><br><span class="line">File.isVinyl = <span class="function"><span class="keyword">function</span> (<span class="params">file</span>) </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(File.prototype, <span class="string">'contents'</span>, &#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(File.prototype, <span class="string">'cwd'</span>, &#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(File.prototype, <span class="string">'base'</span>, &#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(File.prototype, <span class="string">'relative'</span>, &#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(File.prototype, <span class="string">'dirname'</span>, &#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(File.prototype, <span class="string">'basename'</span>, &#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(File.prototype, <span class="string">'stem'</span>, &#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(File.prototype, <span class="string">'extname'</span>, &#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(File.prototype, <span class="string">'path'</span>, &#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(File.prototype, <span class="string">'symlink'</span>, &#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = File;</span><br></pre></td></tr></table></figure><p>我就不一一注释了，具体的作用其实名字已经很清晰了<br>原型对象上的方法总结下：</p><ul><li>isBuffer</li><li>isSream</li><li>isNull</li><li>isDirectory</li><li>isSymbolic</li><li>clone</li><li>inspect</li></ul><p>通过Object.defineProperty定义的属性</p><ul><li>contents 文件内容</li><li>cwd 工作目录</li><li>base 基准路径</li><li>relative 相对路径</li><li>dirname 文件夹名称</li><li>basename 文件名称（包括扩展名）</li><li>stem 文件名</li><li>extname 扩展名</li><li>path 完整路径</li><li>symlink 软链</li></ul><h2 id="vinyl总结"><a href="#vinyl总结" class="headerlink" title="vinyl总结"></a>vinyl总结</h2><p>正如简介所说，这个库最重要的就是path和contents属性。整体实现也是相对简单，这里就不赘述了。对于重要但是简单的库，我这边会简单介绍，仅供讲解gulp主流程 的时候回顾参考。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;vinyl简介&quot;&gt;&lt;a href=&quot;#vinyl简介&quot; class=&quot;headerlink&quot; title=&quot;vinyl简介&quot;&gt;&lt;/a&gt;vinyl简介&lt;/h2&gt;&lt;p&gt;vinyl是gulp团队维护的一个虚拟文件格式库。Vinyl对象，主要包括path和contents属性，是一个描述文件的元数据对象。&lt;/p&gt;
&lt;h2 id=&quot;vinyl用法&quot;&gt;&lt;a href=&quot;#vinyl用法&quot; class=&quot;headerlink&quot; title=&quot;vinyl用法&quot;&gt;&lt;/a&gt;vinyl用法&lt;/h2&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; Vinyl = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;vinyl&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; jsFile = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Vinyl(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  cwd: &lt;span class=&quot;string&quot;&gt;&#39;/&#39;&lt;/span&gt;, 工作目录&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  base: &lt;span class=&quot;string&quot;&gt;&#39;/test/&#39;&lt;/span&gt;, base路径&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  path: &lt;span class=&quot;string&quot;&gt;&#39;/test/file.js&#39;&lt;/span&gt;, &lt;span class=&quot;comment&quot;&gt;//&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  contents: &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Buffer(&lt;span class=&quot;string&quot;&gt;&#39;var x = 123&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
    
      <category term="gulp" scheme="http://yoursite.com/tags/gulp/"/>
    
  </entry>
  
  <entry>
    <title>gulp系列之through2源码笔记</title>
    <link href="http://yoursite.com/2020/01/03/gulp%E7%B3%BB%E5%88%97%E4%B9%8Bthrough2%E6%BA%90%E7%A0%81%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2020/01/03/gulp%E7%B3%BB%E5%88%97%E4%B9%8Bthrough2%E6%BA%90%E7%A0%81%E7%AC%94%E8%AE%B0/</id>
    <published>2020-01-03T07:41:57.000Z</published>
    <updated>2020-01-29T10:59:34.338Z</updated>
    
    <content type="html"><![CDATA[<h2 id="through2简介"><a href="#through2简介" class="headerlink" title="through2简介"></a>through2简介</h2><p>仓库简介：A tiny wrapper around Node.js streams.Transform (Streams2/3) to avoid explicit subclassing noise. 简单来说它就是用readable-stream库创建transform stream。如果使用官方的Stream接口，还要考虑兼容性问题。</p><h2 id="through2用法"><a href="#through2用法" class="headerlink" title="through2用法"></a>through2用法</h2><p>具体用法直接看through2的<a href="https://github.com/rvagg/through2" target="_blank" rel="noopener">github</a>, 另外我在阅读过程中也顺便提交PR修复了readme.md中遗漏的括号。</p><p>through2函数：<code>through2([ options, ] [ transformFunction ] [, flushFunction ])</code></p><p>options就是和ransform stream相关的配置项。</p><p>transformFunction，简单概括，它就是连接readable stream和writable stream的桥梁，它改变可读流之后供可写流消费。这个transformFunction也是duplex stream和transform stream最大的区别。</p><p>flushFunction将在所有输入流传输结束后调用，用来结束transform stream。</p><p>through2一般用在pipe中，抄官方demo如下作参考：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">fs.createReadStream(<span class="string">'ex.txt'</span>)</span><br><span class="line">  .pipe(through2(<span class="function"><span class="keyword">function</span> (<span class="params">chunk, enc, callback</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; chunk.length; i++)</span><br><span class="line">      <span class="keyword">if</span> (chunk[i] == <span class="number">97</span>)</span><br><span class="line">        chunk[i] = <span class="number">122</span> <span class="comment">// swap 'a' for 'z'</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.push(chunk)</span><br><span class="line"></span><br><span class="line">    callback()</span><br><span class="line">   &#125;))</span><br><span class="line">  .pipe(fs.createWriteStream(<span class="string">'out.txt'</span>))</span><br><span class="line">  .on(<span class="string">'finish'</span>, () =&gt; doSomethingSpecial())</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="源码简介"><a href="#源码简介" class="headerlink" title="源码简介"></a>源码简介</h2><p>如果你深入了解过Stream，看了through2的用法，其实已经可以猜测到它源码是如何工作的。</p><p>为什么这么说呢？因为我学习这块的时候直接看through2的源码，发现自己其实是不理解pipe和through2结合起来，怎么就可以做到这种修改可读流数据的黑魔法。说白了是对pipe方法的了解很模糊，Stream的pipe方法，其实只需要传一个dest流作为参数，它内部已经实现了对dest流的data和end事件的监听。</p><p>抛开源码去理解，pipe管道只是一个黑盒，传入一个transfrom / duplex / writable stream作为pipe的参数，源头的readable stream可以自动从源头流到出口writable stream，并通过执行每一个pipe方法对stream做相应的处理。</p><p>回到through2，它就是帮助你快速创建一个transform stream的工具函数。</p><p>看核心源码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main export, just make me a transform stream!</span></span><br><span class="line"><span class="built_in">module</span>.exports = through2(<span class="function"><span class="keyword">function</span> (<span class="params">options, transform, flush</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> t2 = <span class="keyword">new</span> DestroyableTransform(options)</span><br><span class="line"></span><br><span class="line">  t2._transform = transform</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (flush)</span><br><span class="line">    t2._flush = flush</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> t2</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>可以看到through2确实只是返回一个DestroyableTransform流。<br>那我们看看DestroyableTransform。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Transform = <span class="built_in">require</span>(<span class="string">'readable-stream'</span>).Transform</span><br><span class="line">  , inherits  = <span class="built_in">require</span>(<span class="string">'util'</span>).inherits</span><br><span class="line">  , xtend     = <span class="built_in">require</span>(<span class="string">'xtend'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">DestroyableTransform</span>(<span class="params">opts</span>) </span>&#123;</span><br><span class="line">  Transform.call(<span class="keyword">this</span>, opts)</span><br><span class="line">  <span class="keyword">this</span>._destroyed = <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">inherits(DestroyableTransform, Transform)</span><br><span class="line"></span><br><span class="line">DestroyableTransform.prototype.destroy = <span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>._destroyed) <span class="keyword">return</span></span><br><span class="line">  <span class="keyword">this</span>._destroyed = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> self = <span class="keyword">this</span></span><br><span class="line">  process.nextTick(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (err)</span><br><span class="line">      self.emit(<span class="string">'error'</span>, err)</span><br><span class="line">    self.emit(<span class="string">'close'</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>继承readable-stream的Transform，然后原型链上增加一个destroy方法。非常简单。<br>核心源码部分就分析到此。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>这篇源码笔记看上去没怎么讲解through2，因为它本身确实没啥可以讲的，只是创建transform stream都会用到它处理。</p><p>我在研读它之前的困惑，不在于这个库本身，而是对Stream的理解有点模糊。先将理解记录下来，供日后参考。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;through2简介&quot;&gt;&lt;a href=&quot;#through2简介&quot; class=&quot;headerlink&quot; title=&quot;through2简介&quot;&gt;&lt;/a&gt;through2简介&lt;/h2&gt;&lt;p&gt;仓库简介：A tiny wrapper around Node.js streams.Transform (Streams2/3) to avoid explicit subclassing noise. 简单来说它就是用readable-stream库创建transform stream。如果使用官方的Stream接口，还要考虑兼容性问题。&lt;/p&gt;
&lt;h2 id=&quot;through2用法&quot;&gt;&lt;a href=&quot;#through2用法&quot; class=&quot;headerlink&quot; title=&quot;through2用法&quot;&gt;&lt;/a&gt;through2用法&lt;/h2&gt;&lt;p&gt;具体用法直接看through2的&lt;a href=&quot;https://github.com/rvagg/through2&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;github&lt;/a&gt;, 另外我在阅读过程中也顺便提交PR修复了readme.md中遗漏的括号。&lt;/p&gt;
&lt;p&gt;through2函数：&lt;code&gt;through2([ options, ] [ transformFunction ] [, flushFunction ])&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;options就是和ransform stream相关的配置项。&lt;/p&gt;
&lt;p&gt;transformFunction，简单概括，它就是连接readable stream和writable stream的桥梁，它改变可读流之后供可写流消费。这个transformFunction也是duplex stream和transform stream最大的区别。&lt;/p&gt;
&lt;p&gt;flushFunction将在所有输入流传输结束后调用，用来结束transform stream。&lt;/p&gt;
&lt;p&gt;through2一般用在pipe中，抄官方demo如下作参考：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;fs.createReadStream(&lt;span class=&quot;string&quot;&gt;&#39;ex.txt&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  .pipe(through2(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;chunk, enc, callback&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; chunk.length; i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (chunk[i] == &lt;span class=&quot;number&quot;&gt;97&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        chunk[i] = &lt;span class=&quot;number&quot;&gt;122&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;// swap &#39;a&#39; for &#39;z&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.push(chunk)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    callback()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  .pipe(fs.createWriteStream(&lt;span class=&quot;string&quot;&gt;&#39;out.txt&#39;&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  .on(&lt;span class=&quot;string&quot;&gt;&#39;finish&#39;&lt;/span&gt;, () =&amp;gt; doSomethingSpecial())&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
    
      <category term="gulp" scheme="http://yoursite.com/tags/gulp/"/>
    
  </entry>
  
  <entry>
    <title>gulp系列之pump源码笔记</title>
    <link href="http://yoursite.com/2019/12/30/gulp%E7%B3%BB%E5%88%97%E4%B9%8Bpump%E6%BA%90%E7%A0%81%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2019/12/30/gulp%E7%B3%BB%E5%88%97%E4%B9%8Bpump%E6%BA%90%E7%A0%81%E7%AC%94%E8%AE%B0/</id>
    <published>2019-12-30T02:36:18.000Z</published>
    <updated>2020-01-29T10:59:34.337Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>近期在翻阅gulp的源码，它引用到了很多外部包，不用慌，待我抽丝剥茧逐个击破。接下来会写gulp系列的源码解析，会将gulp使用的核心库逐个介绍，最后再串起来梳理gulp的流程。</p><p>选择用分总的结构讲解gulp源码，是因为总分总的意义不太大。gulp本身引用了很多第三方库，如果聚焦于其主库去说流程，实际上没有太多值得说的东西。</p><p>抛开引用的诸多库，gulp最核心的还是使用了Stream。对于Stream的概念，我就不赘述了，不熟悉的同学去回顾一下node的相关文档。这里有一篇文章值得一读 <a href="https://github.com/substack/stream-handbook" target="_blank" rel="noopener"><em>stream-handbook</em></a>。</p><p>另外，源码分析的文章，我的初衷更多是总结回顾，如果同时能对读者有所帮助，也是一件好事。</p><h2 id="pump简介"><a href="#pump简介" class="headerlink" title="pump简介"></a>pump简介</h2><p><a href="https://github.com/mafintosh/pump" target="_blank" rel="noopener">pump</a>是一个小node模块，它通过管道将流连接在一起，并在其中一个关闭时销毁所有流。</p><p>首先分析pump，两点原因</p><ol><li>gulp源码阅读过程中一路追溯到pump，pump算是基础。</li><li>pump的实现中有闭包的应用场景，值得加深对闭包的学习。</li></ol><a id="more"></a><h2 id="pump源码解析"><a href="#pump源码解析" class="headerlink" title="pump源码解析"></a>pump源码解析</h2><p>首先来看看pump库的目录结构：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">❯ tree .&#x2F;node_modules&#x2F;pump</span><br><span class="line">.&#x2F;node_modules&#x2F;pump</span><br><span class="line">├── LICENSE</span><br><span class="line">├── README.md</span><br><span class="line">├── index.js</span><br><span class="line">├── package.json</span><br><span class="line">├── test-browser.js</span><br><span class="line">└── test-node.js</span><br><span class="line"></span><br><span class="line">0 directories, 6 files</span><br></pre></td></tr></table></figure><p>可以看出如简介所说，确实是一个小node module。源码有且只有index.js这个入口文件。</p><p>接下来，我们看看代码的框架结构。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> once = requrie(<span class="string">'once'</span>)</span><br><span class="line"><span class="keyword">var</span> eos = <span class="built_in">require</span>(<span class="string">'end-of-stream'</span>)</span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 空函数</span></span><br><span class="line"><span class="keyword">var</span> noop = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="comment">// 判断process.version是否为旧版本。此处存疑，v.0或者.0开头即可，没见过这种版本号。</span></span><br><span class="line"><span class="keyword">var</span> ancient = <span class="regexp">/^v?\.0/</span>.test(process.version)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断入参fn是否为function</span></span><br><span class="line"><span class="keyword">var</span> isFn = <span class="function"><span class="keyword">function</span> (<span class="params">fn</span>) </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断入参stream是否为fs相关</span></span><br><span class="line"><span class="keyword">var</span> isFs = <span class="function"><span class="keyword">function</span> (<span class="params">stream</span>) </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断入参stream是否为request相关</span></span><br><span class="line"><span class="keyword">var</span> isRequest = <span class="function"><span class="keyword">function</span> (<span class="params">stream</span>) </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将stream destroy的函数</span></span><br><span class="line"><span class="keyword">var</span> destroyer = <span class="function"><span class="keyword">function</span> (<span class="params">stream, reading, writing, callback</span>) </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行入参fn函数</span></span><br><span class="line"><span class="keyword">var</span> call = <span class="function"><span class="keyword">function</span> (<span class="params">fn</span>) </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回from.pipe(to)</span></span><br><span class="line"><span class="keyword">var</span> pipe = <span class="function"><span class="keyword">function</span> (<span class="params">from , to</span>) </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// pump主函数</span></span><br><span class="line"><span class="keyword">var</span> pump = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = pump</span><br></pre></td></tr></table></figure><p>如上，将index.js文件结构梳理了一下。其中ancient这个变量我没有看懂，如果有了解的小伙伴欢迎评论探讨。接下来着重讲讲pump函数和destroyer函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> pump = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> streams = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>) <span class="comment">// 将入参转化为streams数组</span></span><br><span class="line">  <span class="keyword">var</span> callback = isFn(streams[streams.length - <span class="number">1</span>] || noop) &amp;&amp; streams.pop() || noop <span class="comment">// callback的获取</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(streams[<span class="number">0</span>])) streams = streams[<span class="number">0</span>] <span class="comment">// 兼容支持第一个参数是数组，传入所有的stream</span></span><br><span class="line">  <span class="keyword">if</span> (streams.length &lt; <span class="number">2</span>) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'pump requires two streams per minimum'</span>) <span class="comment">// 敲黑板，至少需要两个stream，否则你用pump干啥？</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> error</span><br><span class="line">  <span class="keyword">var</span> destroys = streams.map(<span class="function"><span class="keyword">function</span> (<span class="params">stream, i</span>) </span>&#123; <span class="comment">// 通过streams.map获取destroy函数的数组，这个数组在未来的destroyer的callback中可能用到</span></span><br><span class="line">    <span class="keyword">var</span> reading = i &lt; streams.length - <span class="number">1</span> <span class="comment">// streams没到最后一个的时候，reading状态都是true</span></span><br><span class="line">    <span class="keyword">var</span> writing = i &gt; <span class="number">0</span> <span class="comment">// streams从第二个开始，writing状态都是true</span></span><br><span class="line">    <span class="keyword">return</span> destroyer(stream, reading, writing, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (!error) error = err <span class="comment">// streams共享的error值，如果不存在，先赋值</span></span><br><span class="line">      <span class="keyword">if</span> (err) destroys.forEach(call) <span class="comment">// 如果存在err，将destroys数组中的每一个函数执行一遍，这个函数详情件destroyer分析</span></span><br><span class="line">      <span class="keyword">if</span> (reading) <span class="keyword">return</span> <span class="comment">// 如果没有err，而且正在reading，return</span></span><br><span class="line">      destroys.forEach(call) <span class="comment">// 如果reading为false，那么destroyer的回调里面，将destroys数组中的每一个函数执行一遍，这个函数详情件destroyer分析</span></span><br><span class="line">      callback(error) <span class="comment">// 最后，执行用户传进来的callback参数</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  streams.reduce(pipe) <span class="comment">// 通过数组的reduce方法，逐步执行Stream.pipe</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来我们重点看看destroyer函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> destroyer = <span class="function"><span class="keyword">function</span> (<span class="params">stream, reading, writing, callback</span>) </span>&#123;</span><br><span class="line">  callback = once(callback) <span class="comment">// 保证callback只执行一次，once来自依赖，感兴趣可以自行查看</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> closed = <span class="literal">false</span>  <span class="comment">// 标志stream是否已经close</span></span><br><span class="line">  stream.on(<span class="string">'close'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    closed = <span class="literal">true</span> <span class="comment">// 触发close事件，将closed设置为true</span></span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// eos依赖简介：A node module that calls a callback when a readable/writable/duplex stream has completed or failed.</span></span><br><span class="line">  eos(stream, &#123;<span class="attr">readable</span>: reading, <span class="attr">writable</span>: writing&#125;, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (err) <span class="keyword">return</span> callback(err)</span><br><span class="line">    closed = <span class="literal">true</span></span><br><span class="line">    callback()</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> destroyed = <span class="literal">false</span> <span class="comment">// 标志stream是否已经destroy</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (closed) <span class="keyword">return</span> <span class="comment">// 如果closed，return</span></span><br><span class="line">    <span class="keyword">if</span> (destroyed) <span class="keyword">return</span> <span class="comment">// 如果destroyed，return</span></span><br><span class="line">    destroyed = <span class="literal">true</span> <span class="comment">// 将destroyed设置为true，防止重复执行下方逻辑</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据stream的类型，destroy</span></span><br><span class="line">    <span class="keyword">if</span> (isFS(stream)) <span class="keyword">return</span> stream.close(noop) <span class="comment">// use close for fs streams to avoid fd leaks</span></span><br><span class="line">    <span class="keyword">if</span> (isRequest(stream)) <span class="keyword">return</span> stream.abort() <span class="comment">// request.destroy just do .end - .abort is what we want</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (isFn(stream.destroy)) <span class="keyword">return</span> stream.destroy()</span><br><span class="line">    <span class="comment">// 如果stream不是以上类型，调用callback返回error</span></span><br><span class="line">    callback(err || <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'stream was destroyed'</span>))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>源码已经分析完了，我们梳理一下核心主流程，分支情况请忽略。</p><ol><li>入参传多个stream或者streams数组，最后一个参数传入callback到pump函数。</li><li>pump解析参数，同时通过streams.reduce(pipe)将多个stream合并成一个stream。</li><li>在第二步的过程中，根据stream生成destroys数组，此数组包含了调用destroyer函数返回的一个匿名函数，该匿名函数会销毁当前的stream。</li><li>eos执行过程中，如果遇到错误, 执行callback(err)，即destroys.forEach(call)。这样pump函数入参的所有stream进行销毁。</li></ol><p>好的，分析完毕。其中涉及到比较多闭包的应用，比如在destroyer函数中closed和destroyed变量，就是在返回的匿名函数中可以访问。再比如pump主函数中，destroys变量，return的destroyer函数执行过程中的callback中可以访问。对于未来需要访问的时候就能自由访问，这就是闭包的一个非常具体的学习例子。</p><p>这个源码分析还是比较简单，其中稍微有点难的点，是下方的代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> destroys = streams.map(<span class="function"><span class="keyword">function</span> (<span class="params">stream, i</span>) </span>&#123; <span class="comment">// 通过streams.map获取destroy函数的数组，这个数组在未来的destroyer的callback中可能用到</span></span><br><span class="line">  <span class="keyword">var</span> reading = i &lt; streams.length - <span class="number">1</span> <span class="comment">// streams没到最后一个的时候，reading状态都是true</span></span><br><span class="line">  <span class="keyword">var</span> writing = i &gt; <span class="number">0</span> <span class="comment">// streams从第二个开始，writing状态都是true</span></span><br><span class="line">  <span class="keyword">return</span> destroyer(stream, reading, writing, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!error) error = err <span class="comment">// streams共享的error值，如果不存在，先赋值</span></span><br><span class="line">    <span class="keyword">if</span> (err) destroys.forEach(call) <span class="comment">// 如果存在err，将destroys数组中的每一个函数执行一遍，这个函数详情件destroyer分析</span></span><br><span class="line">    <span class="keyword">if</span> (reading) <span class="keyword">return</span> <span class="comment">// 如果没有err，而且正在reading，return</span></span><br><span class="line">    destroys.forEach(call) <span class="comment">// 如果reading为false，那么destroyer的回调里面，将destroys数组中的每一个函数执行一遍，这个函数详情件destroyer分析</span></span><br><span class="line">    callback(error) <span class="comment">// 最后，执行用户传进来的callback参数</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>一开始看到destroys赋值之后并没有在后面用到，觉得代码有问题，仔细一看，其实它在destroyer函数的callback中有用到。这段逻辑个人感觉会有点绕，如果不认真看。</p><p>Ok，今天，我们就开心的分析完pump的源码啦，写代码的想象力又可以更丰富一点！</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;近期在翻阅gulp的源码，它引用到了很多外部包，不用慌，待我抽丝剥茧逐个击破。接下来会写gulp系列的源码解析，会将gulp使用的核心库逐个介绍，最后再串起来梳理gulp的流程。&lt;/p&gt;
&lt;p&gt;选择用分总的结构讲解gulp源码，是因为总分总的意义不太大。gulp本身引用了很多第三方库，如果聚焦于其主库去说流程，实际上没有太多值得说的东西。&lt;/p&gt;
&lt;p&gt;抛开引用的诸多库，gulp最核心的还是使用了Stream。对于Stream的概念，我就不赘述了，不熟悉的同学去回顾一下node的相关文档。这里有一篇文章值得一读 &lt;a href=&quot;https://github.com/substack/stream-handbook&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;em&gt;stream-handbook&lt;/em&gt;&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;另外，源码分析的文章，我的初衷更多是总结回顾，如果同时能对读者有所帮助，也是一件好事。&lt;/p&gt;
&lt;h2 id=&quot;pump简介&quot;&gt;&lt;a href=&quot;#pump简介&quot; class=&quot;headerlink&quot; title=&quot;pump简介&quot;&gt;&lt;/a&gt;pump简介&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/mafintosh/pump&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;pump&lt;/a&gt;是一个小node模块，它通过管道将流连接在一起，并在其中一个关闭时销毁所有流。&lt;/p&gt;
&lt;p&gt;首先分析pump，两点原因&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;gulp源码阅读过程中一路追溯到pump，pump算是基础。&lt;/li&gt;
&lt;li&gt;pump的实现中有闭包的应用场景，值得加深对闭包的学习。&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
    
      <category term="gulp" scheme="http://yoursite.com/tags/gulp/"/>
    
  </entry>
  
  <entry>
    <title>聊聊造轮子和拆轮子</title>
    <link href="http://yoursite.com/2019/12/19/%E8%81%8A%E8%81%8A%E9%80%A0%E8%BD%AE%E5%AD%90%E5%92%8C%E6%8B%86%E8%BD%AE%E5%AD%90/"/>
    <id>http://yoursite.com/2019/12/19/%E8%81%8A%E8%81%8A%E9%80%A0%E8%BD%AE%E5%AD%90%E5%92%8C%E6%8B%86%E8%BD%AE%E5%AD%90/</id>
    <published>2019-12-19T10:04:00.000Z</published>
    <updated>2020-01-29T10:59:34.354Z</updated>
    
    <content type="html"><![CDATA[<p>为了解决工作问题，我看了一些库的源码。也基于社区的实现，工作中定制了一些轮子。最近对造轮子和拆轮子有一些自己的感想，和大家分享下。</p><h2 id="拆"><a href="#拆" class="headerlink" title="拆"></a>拆</h2><p>先说说拆轮子的心路历程，我经历了几个阶段：</p><ol><li>听说看过xxx库的源码很牛逼，好像会涨工资呢，看一看吹吹牛吧</li><li>这个bug涉及到引入npm包的源码了，不看看不知道怎么解决，硬着头皮上吧</li><li>我想做某个工具，不知道怎么实现，要不参考下社区的xxx，看看源码吧</li><li>这个库的api设计的真好，我也想设计类似的api，看看源码吧</li></ol><p>简单来说，就是从应试教育到素质教育的进化。这其中的过程，要我现在回想，还是第一步历程最重要。就像看名著一样，如果觉得大部头看着恶心，那可能一直不会去看了，总要有一个契机先克服恐惧。而涨工资这个最原始的欲望，还是有一定的助推力让我去主动学习一些社区优秀库的源码。当然啦，看源码那么有趣，后面我乐于阅读自然是水到渠成的事情。</p><a id="more"></a><h2 id="造"><a href="#造" class="headerlink" title="造"></a>造</h2><p>再简单说说造轮子，这个没什么心路历程吧，就是根据业务需求自然而然要自己定制一些轮子。对我影响比较大的是Dan Abramov，没记错的话，有一次他发twitter问大家如果一个库不满足你的某些需求你会怎么办呢？他是建议直接fork一份，然后自己修改这个库的源码来满足自己的需求。其实在小白阶段，我经常会抱怨一些库不能很好满足自己的需求，但是没有想过自己也是完全可以改造它的。当我脱离埋怨和四处找更好的轮子的时候，就开始了自己改造轮子或者自己造轮子。很多事情，觉悟大于行动。可能你在四处搜索完美轮子过程中花费的时间，可以做更多有趣的事情。</p><h2 id="足迹"><a href="#足迹" class="headerlink" title="足迹"></a>足迹</h2><p>开源贡献的精神同样重要，在阅读源码的过程中，我也为社区做了一点贡献：</p><ul><li><a href="https://github.com/vueComponent/ant-design-vue" target="_blank" rel="noopener">ant-design-vue</a></li><li><a href="https://github.com/petkaantonov/bluebird" target="_blank" rel="noopener">bluebird</a></li></ul><p>在ant-design-vue中修复了两个样式问题，bluebird中简单复用了没有复用的函数。虽然都是非常小的事情，但是参与贡献这个事情本身就是很正面激励自己。</p><p>同时还在react仓库提交了一个文档更新的<a href="https://github.com/facebook/react/pull/9354" target="_blank" rel="noopener">pr</a>，虽然最后被Dan Abramov 关闭了，但是也在和Dan交流的过程中有所收获。个人觉得，当自己没有任何成就的时候，不要也没有任何精神。热爱，就要有行动。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;为了解决工作问题，我看了一些库的源码。也基于社区的实现，工作中定制了一些轮子。最近对造轮子和拆轮子有一些自己的感想，和大家分享下。&lt;/p&gt;
&lt;h2 id=&quot;拆&quot;&gt;&lt;a href=&quot;#拆&quot; class=&quot;headerlink&quot; title=&quot;拆&quot;&gt;&lt;/a&gt;拆&lt;/h2&gt;&lt;p&gt;先说说拆轮子的心路历程，我经历了几个阶段：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;听说看过xxx库的源码很牛逼，好像会涨工资呢，看一看吹吹牛吧&lt;/li&gt;
&lt;li&gt;这个bug涉及到引入npm包的源码了，不看看不知道怎么解决，硬着头皮上吧&lt;/li&gt;
&lt;li&gt;我想做某个工具，不知道怎么实现，要不参考下社区的xxx，看看源码吧&lt;/li&gt;
&lt;li&gt;这个库的api设计的真好，我也想设计类似的api，看看源码吧&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;简单来说，就是从应试教育到素质教育的进化。这其中的过程，要我现在回想，还是第一步历程最重要。就像看名著一样，如果觉得大部头看着恶心，那可能一直不会去看了，总要有一个契机先克服恐惧。而涨工资这个最原始的欲望，还是有一定的助推力让我去主动学习一些社区优秀库的源码。当然啦，看源码那么有趣，后面我乐于阅读自然是水到渠成的事情。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="技术杂谈" scheme="http://yoursite.com/tags/%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/"/>
    
  </entry>
  
  <entry>
    <title>灰色的b站首页</title>
    <link href="http://yoursite.com/2019/12/13/%E7%81%B0%E8%89%B2%E7%9A%84b%E7%AB%99%E9%A6%96%E9%A1%B5/"/>
    <id>http://yoursite.com/2019/12/13/%E7%81%B0%E8%89%B2%E7%9A%84b%E7%AB%99%E9%A6%96%E9%A1%B5/</id>
    <published>2019-12-13T14:58:15.000Z</published>
    <updated>2020-01-29T10:59:34.346Z</updated>
    
    <content type="html"><![CDATA[<img src="/2019/12/13/%E7%81%B0%E8%89%B2%E7%9A%84b%E7%AB%99%E9%A6%96%E9%A1%B5/black-bilibili-index.jpg" class="" title="灰色的b站首页"><p>今天是12.13日国家公祭日，纪念南京大屠杀30000同胞。看到灰色的b站首页我还愣了一下，随后马上反应过来。</p><p>职业习惯，我查看了下b站灰色蒙层实现原理。</p><img src="/2019/12/13/%E7%81%B0%E8%89%B2%E7%9A%84b%E7%AB%99%E9%A6%96%E9%A1%B5/black-bilibili-code.jpg" class="" title="实现原理"><p>很简单，<code>filter: grayscale(100%)</code>，这行代码就实现了首页灰色滤镜。但是这一行代码就能让访问b站的网友记起历史。或许，这个就是前端技术的温度吧，给这个行业点赞。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;/2019/12/13/%E7%81%B0%E8%89%B2%E7%9A%84b%E7%AB%99%E9%A6%96%E9%A1%B5/black-bilibili-index.jpg&quot; class=&quot;&quot; title=&quot;灰色的b站首页&quot;&gt;

&lt;p&gt;今天是12.
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>node-delegates学习</title>
    <link href="http://yoursite.com/2019/12/10/node-delegates%E5%AD%A6%E4%B9%A0/"/>
    <id>http://yoursite.com/2019/12/10/node-delegates%E5%AD%A6%E4%B9%A0/</id>
    <published>2019-12-10T13:52:54.000Z</published>
    <updated>2020-01-29T10:59:34.339Z</updated>
    
    <content type="html"><![CDATA[<p>最近在学习Koa的源码，除了middleware的思想，我发现其中用到的委托模式也是非常值得学习。说实话，源码学习分享的文章更适合自己看，因为有时候真的觉得好代码胜过千言万语分析，自己写写阅读体会供参考的价值倒还有一点，只是更推荐大家主动阅读源码，学习自己好奇的黑魔法。</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> delegate = <span class="built_in">require</span>(<span class="string">'delegates'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> innerObject = &#123;</span><br><span class="line">  a: <span class="string">'a'</span>,</span><br><span class="line">  methodB: <span class="function"><span class="keyword">function</span> (<span class="params">val</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(val)</span><br><span class="line">  &#125;,</span><br><span class="line">  c: <span class="string">'c'</span>,</span><br><span class="line">  d: <span class="string">'d'</span>,</span><br><span class="line">  e: <span class="string">'e'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> proto = &#123;</span><br><span class="line">  innerObject</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">delegate(proto, <span class="string">'innerObject'</span>)</span><br><span class="line">  .access(<span class="string">'a'</span>)          <span class="comment">// 把a属性的getter和setter都委托到proto对象上面</span></span><br><span class="line">  .method(<span class="string">'methodB'</span>)    <span class="comment">// 把methodB方法委托倒proto对象上面</span></span><br><span class="line">  .getter(<span class="string">'c'</span>)          <span class="comment">// 把c属性的getterproto对象上面</span></span><br><span class="line">  .setter(<span class="string">'d'</span>)          <span class="comment">// 把d属性的setter都委托倒proto对象上面</span></span><br><span class="line">  .fluent(<span class="string">'e'</span>)          <span class="comment">// 把设置e或者读取e的方法委托到proto对象上面</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> q = proto.e()</span><br><span class="line"></span><br><span class="line">proto.e(<span class="number">1</span>)</span><br><span class="line">  .e(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(proto)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印信息如下</span></span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">//   innerObject: &#123; a: 'a', methodB: [Function: methodB], c: 'c', d: 'd', e: 2 &#125;,</span></span><br><span class="line"><span class="comment">//   a: [Getter/Setter],</span></span><br><span class="line"><span class="comment">//   methodB: [Function],</span></span><br><span class="line"><span class="comment">//   c: [Getter],</span></span><br><span class="line"><span class="comment">//   d: [Setter],</span></span><br><span class="line"><span class="comment">//   e: [Function]</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br></pre></td></tr></table></figure><p>其实看了使用方法就知道delegates库是做什么的了，说白了就是将对象内部其他对象的属性或者方法委托到对象上，在未来使用这个对象的过程可以更加方便而不用关注对象内部的对象。</p><a id="more"></a><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><p>在Koa框架层面的应用场景，其实就是将request对象和response对象上的属性方法，委托到被委托的context对象上，这样才有了类似context.URL这种方式便捷的方式去获取request或者response对象上面的属性或方法。让我总结这种委托模式的优点，主要有两点</p><ul><li>代码更具表现力，可以在阅读代码的过程中知道动作</li><li>被委托对象更易使用</li></ul><p>更具表现力这一点，看看如下代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">delegate(proto, <span class="string">'innerObject'</span>)</span><br><span class="line">  .access(<span class="string">'a'</span>)          <span class="comment">// 把a属性的getter和setter都委托到proto对象上面</span></span><br><span class="line">  .method(<span class="string">'methodB'</span>)    <span class="comment">// 把methodB方法委托倒proto对象上面</span></span><br><span class="line">  .getter(<span class="string">'c'</span>)          <span class="comment">// 把c属性的getterproto对象上面</span></span><br><span class="line">  .setter(<span class="string">'d'</span>)          <span class="comment">// 把d属性的setter都委托倒proto对象上面</span></span><br><span class="line">  .fluent(<span class="string">'e'</span>)          <span class="comment">// 把设置e或者读取e的方法委托到proto对象上面</span></span><br></pre></td></tr></table></figure><p>其实如果了解这个delegate库的方法之后，你看到这样的链式调用代码会觉得很舒适，也很清晰知道代码要表达的含义。个人觉得，所谓代码即注释的层次已经是达到了。</p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>原理层面相对简单，建议自己打开源码食用<a href="https://github.com/tj/node-delegates/blob/master/index.js" target="_blank" rel="noopener">node-delegates</a>。链式调用的原理就是<code>return this</code>，委托的主要原理是getter和setter，源码实现方式用的api比较旧，现在可以用Object.defineProperty方法实现。</p><h2 id="吹捧"><a href="#吹捧" class="headerlink" title="吹捧"></a>吹捧</h2><p>TJ Holowaychuk 就是这个node-delegates库的作者，据网上信息了解，他最初是一位平面设计师，学习编程就是去阅读别人的代码，并搞清楚那些代码是如何工作的。额，TJ是我学习路上的榜样，未来要更多去学习优秀的库，提高自己的编程思维和能力！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在学习Koa的源码，除了middleware的思想，我发现其中用到的委托模式也是非常值得学习。说实话，源码学习分享的文章更适合自己看，因为有时候真的觉得好代码胜过千言万语分析，自己写写阅读体会供参考的价值倒还有一点，只是更推荐大家主动阅读源码，学习自己好奇的黑魔法。&lt;/p&gt;
&lt;h2 id=&quot;使用&quot;&gt;&lt;a href=&quot;#使用&quot; class=&quot;headerlink&quot; title=&quot;使用&quot;&gt;&lt;/a&gt;使用&lt;/h2&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; delegate = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;delegates&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; innerObject = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  a: &lt;span class=&quot;string&quot;&gt;&#39;a&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  methodB: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;val&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(val)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  c: &lt;span class=&quot;string&quot;&gt;&#39;c&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  d: &lt;span class=&quot;string&quot;&gt;&#39;d&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  e: &lt;span class=&quot;string&quot;&gt;&#39;e&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; proto = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  innerObject&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;delegate(proto, &lt;span class=&quot;string&quot;&gt;&#39;innerObject&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  .access(&lt;span class=&quot;string&quot;&gt;&#39;a&#39;&lt;/span&gt;)          &lt;span class=&quot;comment&quot;&gt;// 把a属性的getter和setter都委托到proto对象上面&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  .method(&lt;span class=&quot;string&quot;&gt;&#39;methodB&#39;&lt;/span&gt;)    &lt;span class=&quot;comment&quot;&gt;// 把methodB方法委托倒proto对象上面&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  .getter(&lt;span class=&quot;string&quot;&gt;&#39;c&#39;&lt;/span&gt;)          &lt;span class=&quot;comment&quot;&gt;// 把c属性的getterproto对象上面&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  .setter(&lt;span class=&quot;string&quot;&gt;&#39;d&#39;&lt;/span&gt;)          &lt;span class=&quot;comment&quot;&gt;// 把d属性的setter都委托倒proto对象上面&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  .fluent(&lt;span class=&quot;string&quot;&gt;&#39;e&#39;&lt;/span&gt;)          &lt;span class=&quot;comment&quot;&gt;// 把设置e或者读取e的方法委托到proto对象上面&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; q = proto.e()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;proto.e(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  .e(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(proto)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 打印信息如下&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//   innerObject: &amp;#123; a: &#39;a&#39;, methodB: [Function: methodB], c: &#39;c&#39;, d: &#39;d&#39;, e: 2 &amp;#125;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//   a: [Getter/Setter],&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//   methodB: [Function],&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//   c: [Getter],&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//   d: [Setter],&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//   e: [Function]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;其实看了使用方法就知道delegates库是做什么的了，说白了就是将对象内部其他对象的属性或者方法委托到对象上，在未来使用这个对象的过程可以更加方便而不用关注对象内部的对象。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Koa" scheme="http://yoursite.com/tags/Koa/"/>
    
      <category term="委托模式" scheme="http://yoursite.com/tags/%E5%A7%94%E6%89%98%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>浅谈VueRouter实现原理</title>
    <link href="http://yoursite.com/2019/12/02/%E6%B5%85%E8%B0%88VueRouter%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/"/>
    <id>http://yoursite.com/2019/12/02/%E6%B5%85%E8%B0%88VueRouter%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/</id>
    <published>2019-12-02T11:03:27.000Z</published>
    <updated>2020-01-29T10:59:34.346Z</updated>
    
    <content type="html"><![CDATA[<p>有朋友反馈想看更“干”一点的知识分享，最近库存里面只有我之前在腾讯团队那边分享过的VueRouter原理，现把PPT整理一遍，具体讲解部分不赘述，仅供日后参考。</p><h2 id="前端路由实现方式"><a href="#前端路由实现方式" class="headerlink" title="前端路由实现方式"></a>前端路由实现方式</h2><p>这部分内容算是一个基础回顾，如果已经非常熟悉了，可以跳过直接看源码分析部分。<br>前端路由实现方式主要有两种，如下：</p><ul><li>Hash模式</li><li>History模式</li></ul><h3 id="Hash模式"><a href="#Hash模式" class="headerlink" title="Hash模式"></a>Hash模式</h3><p>Hash指url后面的#号和后面的所有字符。hash也称作锚点，它可以使对应的id节点显示在浏览器可视区域内。<br>要实现前端路由功能，主要有以下三点原因：</p><ol><li>hash变更，不会导致浏览器向服务端发送请求，当前页面也不会刷新</li><li>hash变更，会触发hashchange事件</li><li>hash变更，会在浏览器历史记录中添加记录，浏览器前进后退按键可以导航</li></ol><p>代码参考：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 改变hash值</span></span><br><span class="line"><span class="built_in">window</span>.location.hash = <span class="string">'home'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取hash值</span></span><br><span class="line"><span class="built_in">window</span>.location.hash <span class="comment">// '#home'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听hash变更</span></span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'hashchange'</span>, <span class="function"><span class="keyword">function</span> <span class="title">onHashChange</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'hash changed'</span>)</span><br><span class="line">&#125;, <span class="literal">false</span>)</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="History模式"><a href="#History模式" class="headerlink" title="History模式"></a>History模式</h3><p>简单介绍下相关的API</p><ol><li>HTML5引入了history.pushState()和history.replaceState()方法，它们分别可以添加和修改历史记录条目。这些方法通常与window.onpopstate配合使用。</li><li>pushState() 需要三个参数 一个状态对象, 一个标题 (目前被忽略), 和 (可选的) 一个URL。</li><li>history.replaceState() 的使用与 history.pushState() 非常相似，区别在于 replaceState() 是修改了当前的历史记录项而不是新建一个。 注意这并不会阻止其在全局浏览器历史记录中创建一个新的历史记录项。</li></ol><p>如何实现路由呢？参考下面三点原因：</p><ol><li>pushState新增历史记录可以实现无刷新更改地址栏链接</li><li>当用户点击浏览器的前进，后退按钮，会触发popstate事件</li><li>希望不添加一个新记录，而是替换当前的记录，则可以使用replaceState方法</li></ol><p>参考代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// state：需要保存的数据，这个数据在触发popstate事件时，可以在event.state里获取</span></span><br><span class="line"><span class="comment">// title：标题，基本没用，一般传 null</span></span><br><span class="line"><span class="comment">// url：设定新的历史记录的 url。新的 url 与当前 url 的 origin 必须是一樣的，否则会抛出错误。url可以是绝对路径，也可以是相对路径。</span></span><br><span class="line"><span class="built_in">window</span>.history.pushState(state, title, url)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 与 pushState 基本相同，但它是修改当前历史记录，而 pushState 是创建新的历史记录</span></span><br><span class="line"><span class="built_in">window</span>.history.replaceState(state, title, url)</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 监听浏览器前进后退事件，pushState 与 replaceState 方法不会触发</span></span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">"popstate"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="VueRouter实现原理"><a href="#VueRouter实现原理" class="headerlink" title="VueRouter实现原理"></a>VueRouter实现原理</h2><p>简单回顾完前端路由实现方式，我们来聚焦VueRouter的具体实现。我们来到了硬核的源码环节。不用担心，我看得懂的代码都比较简单。</p><h3 id="VueRouter支持模式"><a href="#VueRouter支持模式" class="headerlink" title="VueRouter支持模式"></a>VueRouter支持模式</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">VueRouter</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span> (options: RouterOptions = ) &#123;</span><br><span class="line">    <span class="keyword">let</span> mode = options.mode || <span class="string">'hash'</span></span><br><span class="line">    <span class="keyword">this</span>.fallback = mode === <span class="string">'history'</span></span><br><span class="line">      &amp;&amp; !supportsPushState</span><br><span class="line">      &amp;&amp; options.fallback !== <span class="literal">false</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.fallback) &#123;</span><br><span class="line">      mode = <span class="string">'hash'</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!inBrowser) &#123;</span><br><span class="line">      mode = <span class="string">'abstract'</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.mode = mode</span><br><span class="line">    <span class="keyword">switch</span> (mode) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">'history'</span>:</span><br><span class="line">        <span class="keyword">this</span>.history = <span class="keyword">new</span> HTML5History(<span class="keyword">this</span>, options.base)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">      <span class="keyword">case</span> <span class="string">'hash'</span>:</span><br><span class="line">        <span class="keyword">this</span>.history = <span class="keyword">new</span> HashHistory(</span><br><span class="line">          <span class="keyword">this</span>, options.base, <span class="keyword">this</span>.fallback</span><br><span class="line">        )</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">      <span class="keyword">case</span> <span class="string">'abstract'</span>:</span><br><span class="line">        <span class="keyword">this</span>.history = <span class="keyword">new</span> AbstractHistory(<span class="keyword">this</span>, options.base)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span>) &#123;</span><br><span class="line">          assert(<span class="literal">false</span>, <span class="string">`invalid mode: <span class="subst">$&#123;mode&#125;</span>`</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如上所示，VueRouter支持三种路由模式：</p><ol><li>history mode</li><li>hash mode</li><li>abstract mode</li></ol><p>VueRouter还有对history模式有降级的处理，在不支持history的浏览器环境中，如果fallback的option设置为true，VueRouter的mode会回落到hash模式。<br>abstract模式主要用在测试中，运行在非浏览器环境。我们重点关注history和hash这两种模式。\</p><h3 id="History模式-1"><a href="#History模式-1" class="headerlink" title="History模式"></a>History模式</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">HTML5History</span> <span class="keyword">extends</span> <span class="title">History</span> </span>&#123;</span><br><span class="line">  <span class="keyword">super</span>(router, base)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span> (router: Router, base: ?string) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">window</span>.addEventListener(<span class="string">'popstate'</span>, e =&gt; &#123;</span><br><span class="line">      <span class="keyword">const</span> location = getLocation(<span class="keyword">this</span>.base)</span><br><span class="line">      <span class="comment">// transitionTo()方法在父类中定义，用来处理路由变化中的基础逻辑</span></span><br><span class="line">      <span class="keyword">this</span>.transitionTo(location, route =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (supportsScroll) &#123;</span><br><span class="line">          handleScroll(router, route, current, <span class="literal">true</span>)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如上所示，HTML5History在初始化的时候，添加popstate事件监听。</p><p>如下所示，HTML5History中重要的三个方法，go(), push(), replace()。 pushState和replaceState实际上也是封装了window.history对象上的方法，Vue Router对其做了部分逻辑处理。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">HTML5History</span> <span class="keyword">extends</span> <span class="title">History</span> </span>&#123;</span><br><span class="line">  go (n: number) &#123;</span><br><span class="line">    <span class="built_in">window</span>.history.go(n)</span><br><span class="line">  &#125;</span><br><span class="line">  push (</span><br><span class="line">    location: RawLocation,</span><br><span class="line">    onComplete?: <span class="built_in">Function</span>,</span><br><span class="line">    onAbort?: <span class="built_in">Function</span></span><br><span class="line">  ) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; <span class="attr">current</span>: fromRoute &#125; = <span class="keyword">this</span></span><br><span class="line">    <span class="comment">// transitionTo()方法在父类中定义，用来处理路由变化中的基础逻辑</span></span><br><span class="line">    <span class="keyword">this</span>.transitionTo(location, route =&gt; &#123;</span><br><span class="line">      pushState(cleanPath(<span class="keyword">this</span>.base + route.fullPath))</span><br><span class="line">      handleScroll(<span class="keyword">this</span>.router, route, fromRoute, <span class="literal">false</span>)</span><br><span class="line">      onComplete &amp;&amp; onComplete(route)</span><br><span class="line">    &#125;, onAbort)</span><br><span class="line">  &#125;</span><br><span class="line">  replace (</span><br><span class="line">    location: RawLocation,</span><br><span class="line">    onComplete?: <span class="built_in">Function</span>,</span><br><span class="line">    onAbort?: <span class="built_in">Function</span></span><br><span class="line">  ) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; <span class="attr">current</span>: fromRoute &#125; = <span class="keyword">this</span></span><br><span class="line">    <span class="keyword">this</span>.transitionTo(location, route =&gt; &#123;</span><br><span class="line">      replaceState(cleanPath(<span class="keyword">this</span>.base + route.fullPath))</span><br><span class="line">      handleScroll(<span class="keyword">this</span>.router, route, fromRoute, <span class="literal">false</span>)</span><br><span class="line">      onComplete &amp;&amp; onComplete(route)</span><br><span class="line">    &#125;, onAbort)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Hash模式-1"><a href="#Hash模式-1" class="headerlink" title="Hash模式"></a>Hash模式</h3><p>在Vue app mounted之后添加监听：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">HashHistory</span> <span class="keyword">extends</span> <span class="title">History</span> </span>&#123;</span><br><span class="line">  <span class="comment">// this is delayed until the app mounts</span></span><br><span class="line">  <span class="comment">// to avoid the hashchange listener being fired too early</span></span><br><span class="line">  setupListeners () &#123;</span><br><span class="line">    <span class="keyword">const</span> router = <span class="keyword">this</span>.router</span><br><span class="line">    <span class="keyword">const</span> expectScroll = router.options.scrollBehavior</span><br><span class="line">    <span class="keyword">const</span> supportsScroll = supportsPushState &amp;&amp; expectScroll</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (supportsScroll) &#123;</span><br><span class="line">      setupScroll()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">window</span>.addEventListener(</span><br><span class="line">      supportsPushState ? <span class="string">'popstate'</span> : <span class="string">'hashchange'</span>,</span><br><span class="line">      () =&gt; &#123;</span><br><span class="line">        <span class="keyword">const</span> current = <span class="keyword">this</span>.current</span><br><span class="line">        <span class="keyword">if</span> (!ensureSlash()) &#123;</span><br><span class="line">          <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.transitionTo(getHash(), route =&gt; &#123;</span><br><span class="line">          <span class="keyword">if</span> (supportsScroll) &#123;</span><br><span class="line">            handleScroll(<span class="keyword">this</span>.router, route, current, <span class="literal">true</span>)</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">if</span> (!supportsPushState) &#123;</span><br><span class="line">            replaceHash(route.fullPath)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如下所示，HashHistory中重要的三个方法，go(), push(), replace()。 pushState和replaceState实际上也是封装了window.history对象上的方法，Vue Router对其做了部分逻辑处理。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">HashHistory</span> <span class="keyword">extends</span> <span class="title">History</span> </span>&#123;</span><br><span class="line">  push (location: RawLocation, onComplete?: <span class="built_in">Function</span>, onAbort?: <span class="built_in">Function</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; <span class="attr">current</span>: fromRoute &#125; = <span class="keyword">this</span></span><br><span class="line">    <span class="keyword">this</span>.transitionTo(</span><br><span class="line">      location,</span><br><span class="line">      route =&gt; &#123;</span><br><span class="line">        pushHash(route.fullPath)</span><br><span class="line">        handleScroll(<span class="keyword">this</span>.router, route, fromRoute, <span class="literal">false</span>)</span><br><span class="line">        onComplete &amp;&amp; onComplete(route)</span><br><span class="line">      &#125;,</span><br><span class="line">      onAbort</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  replace (location: RawLocation, onComplete?: <span class="built_in">Function</span>, onAbort?: <span class="built_in">Function</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; <span class="attr">current</span>: fromRoute &#125; = <span class="keyword">this</span></span><br><span class="line">    <span class="keyword">this</span>.transitionTo(</span><br><span class="line">      location,</span><br><span class="line">      route =&gt; &#123;</span><br><span class="line">        replaceHash(route.fullPath)</span><br><span class="line">        handleScroll(<span class="keyword">this</span>.router, route, fromRoute, <span class="literal">false</span>)</span><br><span class="line">        onComplete &amp;&amp; onComplete(route)</span><br><span class="line">      &#125;,</span><br><span class="line">      onAbort</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  go (n: number) &#123;</span><br><span class="line">    <span class="built_in">window</span>.history.go(n)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中有个细节，VueRouter做的非常好，就是有优先考虑pushState的方式去存hash。这个的好处就是可以存储同一个hash值的历史记录多次。如果只是更改hash值，同一个hash值访问多次不会存如历史记录栈。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pushHash</span> (<span class="params">path</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (supportsPushState) &#123;</span><br><span class="line">    pushState(getUrl(path)) <span class="comment">// 优先考虑pushState方式去pushHash</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">window</span>.location.hash = path</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">replaceHash</span> (<span class="params">path</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (supportsPushState) &#123;</span><br><span class="line">    replaceState(getUrl(path))</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">window</span>.location.replace(getUrl(path))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="History-transitionTo"><a href="#History-transitionTo" class="headerlink" title="History.transitionTo()"></a>History.transitionTo()</h3><p>transitionTo方法是History模式实现的重要方法。主要的流程在下方，重点已经在注释中用箭头标注。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">History</span> </span>&#123;</span><br><span class="line">  transitionTo (</span><br><span class="line">    location: RawLocation,</span><br><span class="line">    onComplete?: <span class="built_in">Function</span>,</span><br><span class="line">    onAbort?: <span class="built_in">Function</span></span><br><span class="line">  ) &#123;</span><br><span class="line">    <span class="keyword">const</span> route = <span class="keyword">this</span>.router.match(location, <span class="keyword">this</span>.current)</span><br><span class="line">    <span class="keyword">this</span>.confirmTransition(</span><br><span class="line">      route,</span><br><span class="line">      () =&gt; &#123;</span><br><span class="line">        <span class="keyword">this</span>.updateRoute(route)  <span class="comment">// &lt;--更新路由</span></span><br><span class="line">        onComplete &amp;&amp; onComplete(route)</span><br><span class="line">        <span class="keyword">this</span>.ensureURL()</span><br><span class="line"></span><br><span class="line">        <span class="comment">// fire ready cbs once</span></span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">this</span>.ready) &#123;</span><br><span class="line">          <span class="keyword">this</span>.ready = <span class="literal">true</span></span><br><span class="line">          <span class="keyword">this</span>.readyCbs.forEach(<span class="function"><span class="params">cb</span> =&gt;</span> &#123;</span><br><span class="line">            cb(route)</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      err =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (onAbort) &#123;</span><br><span class="line">          onAbort(err)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (err &amp;&amp; !<span class="keyword">this</span>.ready) &#123;</span><br><span class="line">          <span class="keyword">this</span>.ready = <span class="literal">true</span></span><br><span class="line">          <span class="keyword">this</span>.readyErrorCbs.forEach(<span class="function"><span class="params">cb</span> =&gt;</span> &#123;</span><br><span class="line">            cb(err)</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">History</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  listen (cb: <span class="built_in">Function</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.cb = cb</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  updateRoute (route: Route) &#123;</span><br><span class="line">    <span class="keyword">const</span> prev = <span class="keyword">this</span>.current</span><br><span class="line">    <span class="keyword">this</span>.current = route</span><br><span class="line">    <span class="keyword">this</span>.cb &amp;&amp; <span class="keyword">this</span>.cb(route) <span class="comment">// &lt;--</span></span><br><span class="line">    <span class="keyword">this</span>.router.afterHooks.forEach(<span class="function"><span class="params">hook</span> =&gt;</span> &#123;</span><br><span class="line">      hook &amp;&amp; hook(route, prev)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">VueRouter</span> </span>&#123;</span><br><span class="line">  init (app: any <span class="comment">/* Vue component instance */</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.apps.push(app)</span><br><span class="line"></span><br><span class="line">    history.listen(<span class="function"><span class="params">route</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.apps.forEach(<span class="function">(<span class="params">app</span>) =&gt;</span> &#123;</span><br><span class="line">        app._route = route <span class="comment">// &lt;--</span></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">install</span> (<span class="params">Vue</span>) </span>&#123;</span><br><span class="line">  Vue.mixin(&#123;</span><br><span class="line">    beforeCreate () &#123;</span><br><span class="line">      <span class="keyword">if</span> (isDef(<span class="keyword">this</span>.$options.router)) &#123;</span><br><span class="line">        <span class="keyword">this</span>._routerRoot = <span class="keyword">this</span></span><br><span class="line">        <span class="keyword">this</span>._router = <span class="keyword">this</span>.$options.router</span><br><span class="line">        <span class="keyword">this</span>._router.init(<span class="keyword">this</span>)</span><br><span class="line">        Vue.util.defineReactive(<span class="keyword">this</span>, <span class="string">'_route'</span>, <span class="keyword">this</span>._router.history.current)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>._routerRoot = (<span class="keyword">this</span>.$parent &amp;&amp; <span class="keyword">this</span>.$parent._routerRoot) || <span class="keyword">this</span></span><br><span class="line">      &#125;</span><br><span class="line">      registerInstance(<span class="keyword">this</span>, <span class="keyword">this</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    destroyed () &#123;</span><br><span class="line">      registerInstance(<span class="keyword">this</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="VueRouter主流程"><a href="#VueRouter主流程" class="headerlink" title="VueRouter主流程"></a>VueRouter主流程</h3><ol><li>$router.push()</li><li>History.push()</li><li>History.transitionTo()</li><li>History.updateRoute()</li><li>app._route = route</li><li>vm.render()</li></ol><h2 id="VueRouter组件简介"><a href="#VueRouter组件简介" class="headerlink" title="VueRouter组件简介"></a>VueRouter组件简介</h2><h3 id="RouterView组件"><a href="#RouterView组件" class="headerlink" title="RouterView组件"></a>RouterView组件</h3><p>主要逻辑是拿到URL匹配路由配置对应的组件进行渲染。</p><h3 id="RouterLink组件"><a href="#RouterLink组件" class="headerlink" title="RouterLink组件"></a>RouterLink组件</h3><p>router-link 组件在被点击时，根据prop中的 to 的值去调用 router 的 push 或者 replace 来更新route。同时会检查自身是否和当前路由匹配来决定自身的 activeClass 是否添加。</p><h2 id="VueRouter思考问题"><a href="#VueRouter思考问题" class="headerlink" title="VueRouter思考问题"></a>VueRouter思考问题</h2><p>上面只讲到了VueRouter的主流程，没提到的部分供大家阅读源码和思考。</p><ol><li>RouterView具体如何匹配对应Components？</li><li>路由导航守卫的实现原理？</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;有朋友反馈想看更“干”一点的知识分享，最近库存里面只有我之前在腾讯团队那边分享过的VueRouter原理，现把PPT整理一遍，具体讲解部分不赘述，仅供日后参考。&lt;/p&gt;
&lt;h2 id=&quot;前端路由实现方式&quot;&gt;&lt;a href=&quot;#前端路由实现方式&quot; class=&quot;headerlink&quot; title=&quot;前端路由实现方式&quot;&gt;&lt;/a&gt;前端路由实现方式&lt;/h2&gt;&lt;p&gt;这部分内容算是一个基础回顾，如果已经非常熟悉了，可以跳过直接看源码分析部分。&lt;br&gt;前端路由实现方式主要有两种，如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hash模式&lt;/li&gt;
&lt;li&gt;History模式&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Hash模式&quot;&gt;&lt;a href=&quot;#Hash模式&quot; class=&quot;headerlink&quot; title=&quot;Hash模式&quot;&gt;&lt;/a&gt;Hash模式&lt;/h3&gt;&lt;p&gt;Hash指url后面的#号和后面的所有字符。hash也称作锚点，它可以使对应的id节点显示在浏览器可视区域内。&lt;br&gt;要实现前端路由功能，主要有以下三点原因：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;hash变更，不会导致浏览器向服务端发送请求，当前页面也不会刷新&lt;/li&gt;
&lt;li&gt;hash变更，会触发hashchange事件&lt;/li&gt;
&lt;li&gt;hash变更，会在浏览器历史记录中添加记录，浏览器前进后退按键可以导航&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;代码参考：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 改变hash值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.location.hash = &lt;span class=&quot;string&quot;&gt;&#39;home&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 获取hash值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.location.hash &lt;span class=&quot;comment&quot;&gt;// &#39;#home&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 监听hash变更&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.addEventListener(&lt;span class=&quot;string&quot;&gt;&#39;hashchange&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onHashChange&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;hash changed&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;, &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
    
      <category term="Vue" scheme="http://yoursite.com/tags/Vue/"/>
    
      <category term="VueRouter" scheme="http://yoursite.com/tags/VueRouter/"/>
    
      <category term="前端框架" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>git-flow工具辅助介绍</title>
    <link href="http://yoursite.com/2019/11/30/git-flow%E5%B7%A5%E5%85%B7%E8%BE%85%E5%8A%A9%E4%BB%8B%E7%BB%8D/"/>
    <id>http://yoursite.com/2019/11/30/git-flow%E5%B7%A5%E5%85%B7%E8%BE%85%E5%8A%A9%E4%BB%8B%E7%BB%8D/</id>
    <published>2019-11-30T14:47:39.000Z</published>
    <updated>2020-01-29T10:59:34.335Z</updated>
    
    <content type="html"><![CDATA[<p>最近在实践过程中，使用了git-flow的命令行工具进行管理，对git-flow的流程更加清晰，现在总结出来供参考。</p><p>我使用的是macOS，安装git flow命令行方法如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install git-flow-avh</span><br></pre></td></tr></table></figure><h2 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git flow init</span><br></pre></td></tr></table></figure><p>简单来说，git flow初始化主要做了两件事:</p><ol><li>初始化git仓库</li><li>基于master分支创建develop分支<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br><span class="line">git checkout -b develop</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h2>假设我们需要进行user功能的开发<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git flow feature start user</span><br></pre></td></tr></table></figure>这时git flow做了一件事情，就是基于develop分支，新开一个feature/user分支。类似于如下git命令：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b feature/user</span><br></pre></td></tr></table></figure></li></ol><h2 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h2><p>我们在feature/user分支把user模块的功能开发完成，此时就可以执行如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git flow feature finisth user</span><br></pre></td></tr></table></figure><p>以上命令，其实就是切换回develop分支，merge feature/user的代码，然后将feature/user的分支删除。<br>类似于如下git命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git checkout develop</span><br><span class="line">git merge feature/user</span><br><span class="line">git branch --delete feature/user</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：实际工作中，我们的feature分支合并到develop分支，是全部在线上完成。由完成feature的同学上传对应的feature分支到远程git仓库，然后创建合并请求申请。项目负责人在code review确认后，同意合并该分支到develop分支，并删除该feature分支。</p><p>第三步在开发过程中是一个持续的过程，会不断有新的feature分支合并到develop分支。</p><h2 id="第四步"><a href="#第四步" class="headerlink" title="第四步"></a>第四步</h2><p>feature开发完之后，开始准备release分支提测。类似于start一个feature分支，release分支命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git flow release start v1.0</span><br><span class="line">git flow release publish v1.0</span><br></pre></td></tr></table></figure><p>上面两行命令，就是基于develop分支新建一个release/v1.0分支，然后将该分支推送到远程仓库。测试回归过程中，遇到有问题，所有bugfix都在该分支进行调整。<br>类似于如下git命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git checkout develop</span><br><span class="line">git checkout -b release/v1.0</span><br><span class="line">git push -u origin release/v1.0</span><br></pre></td></tr></table></figure><h2 id="第五步"><a href="#第五步" class="headerlink" title="第五步"></a>第五步</h2><p>release分支完成之后，完成如下命令，将所有代码回补到develop分支，最后合并到master分支。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git flow release finish v1.0</span><br></pre></td></tr></table></figure><p><strong>注意</strong> 实际生产环境，涉及到develop分支和master分支的代码merge，一般都是在线上发起merge request来完成。git flow工具只是做一个辅助参考，不需要所有命令都使用。<br>类似于如下git命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git checkout develop</span><br><span class="line">git merge release/v1.0</span><br><span class="line">git tab v1.0</span><br><span class="line">git checkout master</span><br><span class="line">git merge develop</span><br></pre></td></tr></table></figure><p>👌，经过上面的操作，一个相对完整的git-flow流程就愉快地走了一遍。由于git flow的命令非常清晰易懂，而且背后执行的git操作其实也相对简单，就不把每一步执行的结果截图演示了。</p><p>git flow的命令行工具，在一定程度上辅助我们简化git flow流程的操作，但是最重要的是我们如果真的在用git flow的方法论开发，一定要对git flow本身的流程有非常清晰的认识，才能更好借助git flow命令提高工作中的效率。</p><p>另外，在试用git flow命令行工具的过程中，我和公司的同事也讨论了下其限制。比如我们如果有超过一条主线，比如，多个定制版本的时候，标准的git flow就不能满足开发需求。但是要结合git flow本身的规范性去衍生一些解决方案出来也是有的，如下：</p><ul><li>新开仓库走git flow开发定制版</li><li>增加特殊的分支，用来定制使用，平行于master分支。例如master_a, master_b等定制化分支。<br>基于git flow衍生的解决方案，也是可以相对规范地解决一些复杂的生产开发问题。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在实践过程中，使用了git-flow的命令行工具进行管理，对git-flow的流程更加清晰，现在总结出来供参考。&lt;/p&gt;
&lt;p&gt;我使用的是macOS，安装git flow命令行方法如下：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;brew install git-flow-avh&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&quot;第一步&quot;&gt;&lt;a href=&quot;#第一步&quot; class=&quot;headerlink&quot; title=&quot;第一步&quot;&gt;&lt;/a&gt;第一步&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git flow init&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;简单来说，git flow初始化主要做了两件事:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;初始化git仓库&lt;/li&gt;
&lt;li&gt;基于master分支创建develop分支&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git init&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git checkout -b develop&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
      <category term="git-flow" scheme="http://yoursite.com/tags/git-flow/"/>
    
      <category term="工具" scheme="http://yoursite.com/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>前端工程化实践系列--ESLint定制规则</title>
    <link href="http://yoursite.com/2019/11/26/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96%E5%AE%9E%E8%B7%B5%E7%B3%BB%E5%88%97-ESLint%E5%AE%9A%E5%88%B6%E8%A7%84%E5%88%99/"/>
    <id>http://yoursite.com/2019/11/26/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96%E5%AE%9E%E8%B7%B5%E7%B3%BB%E5%88%97-ESLint%E5%AE%9A%E5%88%B6%E8%A7%84%E5%88%99/</id>
    <published>2019-11-26T06:33:08.000Z</published>
    <updated>2020-01-29T10:59:34.340Z</updated>
    
    <content type="html"><![CDATA[<p>写过前端项目的同学，对ESLint都应该非常熟悉。业界常用的ESLint规范，一般是以<a href="https://github.com/airbnb/javascript" target="_blank" rel="noopener">Airbnb</a>和<a href="https://github.com/standard/standard" target="_blank" rel="noopener">standard</a>规范为主。我们今天是抛开直接在extends里面引入业界ESLint扩展，来聊聊自己项目实践中定制的ESLint规则。</p><p>我们先来看看ESLint官方的<a href="https://eslint.org/docs/rules/" target="_blank" rel="noopener">Rules</a>， 它分为如下多个种类:</p><ul><li><p>Possible Errors</p></li><li><p>Best Practices</p></li><li><p>Strict Mode</p></li><li><p>Variables</p></li><li><p>Node.js and CommonJS</p></li><li><p>Stylistic Issues</p></li><li><p>ECMAScript 6</p></li><li><p>Deprecated</p></li><li><p>Removed</p><a id="more"></a><p>我们重点看看Stylistic Issues这个分类，这个分类的Rules是解决什么问题的呢？官方解释称这些规则是关于风格指南，而且是非常主观的。对于这样的描述，我们可能在定制规则的过程中一带而过，而其他最佳实践和一些避免潜在错误的规范，standard等规范又帮我们做了。别着急，我们看看这几个Rules。</p></li><li><p>max-depth(强制可嵌套的块的最大深度)</p></li><li><p>max-len(强制一行的最大长度)</p></li><li><p>max-lines(强制最大行数)</p></li><li><p>max-lines-per-function(强制函数最大代码行数)</p></li><li><p>max-nested-callbacks(强制回调函数最大嵌套深度)</p></li><li><p>max-params(强制函数定义中最多允许的参数数量)</p></li><li><p>max-statements(强制函数块最多允许的的语句数量)</p></li><li><p>max-statements-per-line(强制每一行中所允许的最大语句数量)</p></li></ul><p>这些主观性强的规则，却恰恰帮助我们为团队定制规范提供了很好的帮助。max-depth适当的嵌套数，可以避免写出难以阅读的复杂代码，max-len可以强迫开发过程中主动换行提高代码的可阅读性，max-lines相关的rules可以让开发对代码细粒度的把握有更看得见摸得着的依据，max-nested-callbacks这个可以在ESLint层面解决回调地狱的问题。</p><p>为什么能发现这些比较特殊的规则呢？也是我们团队开发过程中，发现有不少同学会把一个方法或者一个函数写成几百行的情况。对于这个问题，明显不能通过code review这种后置笨重的方法去解决，所以我们找时间去阅读ESLint的官方规则，对症下药。</p><p>刚刚开始前端开发的时候，我对标准这种东西的认识还是比较肤浅。曾以为业界的规范就是拿来就用即可，但是实际开发过程中，很可能和不同层次的开发合作，面对复杂的开发人员现状，势必要有更高级别的约束和提示。业内的公用标准，对于团队来说，更重要的是借鉴，并根据实际情况做灵活的调整。</p><p>希望这种“个性化定制”，能给做团队标准化制定工作的朋友和未来的自己一些启发。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;写过前端项目的同学，对ESLint都应该非常熟悉。业界常用的ESLint规范，一般是以&lt;a href=&quot;https://github.com/airbnb/javascript&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Airbnb&lt;/a&gt;和&lt;a href=&quot;https://github.com/standard/standard&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;standard&lt;/a&gt;规范为主。我们今天是抛开直接在extends里面引入业界ESLint扩展，来聊聊自己项目实践中定制的ESLint规则。&lt;/p&gt;
&lt;p&gt;我们先来看看ESLint官方的&lt;a href=&quot;https://eslint.org/docs/rules/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Rules&lt;/a&gt;， 它分为如下多个种类:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Possible Errors&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Best Practices&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Strict Mode&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Variables&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Node.js and CommonJS&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Stylistic Issues&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ECMAScript 6&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Deprecated&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Removed&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="前端工程化" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96/"/>
    
      <category term="标准" scheme="http://yoursite.com/tags/%E6%A0%87%E5%87%86/"/>
    
      <category term="ESLint" scheme="http://yoursite.com/tags/ESLint/"/>
    
  </entry>
  
  <entry>
    <title>聊聊Kindle的使用感受</title>
    <link href="http://yoursite.com/2019/11/21/%E8%81%8A%E8%81%8AKindle%E7%9A%84%E4%BD%BF%E7%94%A8%E6%84%9F%E5%8F%97/"/>
    <id>http://yoursite.com/2019/11/21/%E8%81%8A%E8%81%8AKindle%E7%9A%84%E4%BD%BF%E7%94%A8%E6%84%9F%E5%8F%97/</id>
    <published>2019-11-20T16:15:57.000Z</published>
    <updated>2020-01-29T10:59:34.353Z</updated>
    
    <content type="html"><![CDATA[<p>前几个月，我买入了一台Kindle。买之前因为有比较强烈的阅读需求，所以也没有犹豫太长时间，入手了Kindle Oasis3。</p><p>Kindle这个阅读器很神奇，让我在短短几个月阅读了十多本充电用的书籍，包括技术，投资相关。近一两周因为工作的原因，我暂时搁置Kindle没有继续看。直到今天重新拿起来看了些旧书温习，我对Kindle这种方式阅读书籍有了一些思考。</p><p>纸质书有着最好的阅读体验，但是厚重这一点，就让许多人在繁忙的工作之余望而却步了。退而求其次，选择用手机去看，我个人也容易被其他App吸引，导致没有很好的办法长时间专注去看。当我选择了Kindle之后，觉得找到了另一种阅读的体验，那就是方便又专注。这种感觉让我在面对五颜六色的代码编辑器之余，多了一种感受黄金屋美好的体验。它的方便携带和舒适的阅读体验，让我即使在工作之余，也放下了对阅读大部头的心理压力，因为说实话我感觉当下面对的只是Kindle的一个小屏幕，又或者说这是一个小屏幕上的一页文字。这种轻松方便的感觉反而促进我认真学习，不知不觉看多了很多书。</p><a id="more"></a><p>当我们准备学习一个技能或者看完一本书的时候，如果抱着过高的期望或者过高的要求去做，可能效果会打折扣。以前为了面试或者应付一些考试，我会在短时间内看大量的书，那种为了看完而看完的过程真的太煎熬了，而且效果并没有那么理想。但是令我惊讶的一点是，当我专注去使用Kindle之后，却不知不觉消化了非常多的知识。轻松的心态反而促进了学习的动力。</p><p>工作生活中，太多定性定时的任务压着我们喘不过气来。而提效的关键又偏偏是要轻松面对，专注当下而不是专注于感受压力。就像专注Kindle上面的一页文字一样简单，压力也是可以化解为专注当下的每一项小事。大脑总是在思考着一共有多少事没做，和手里捧着一本厚厚的技术书籍一样，会感受到非常大的焦虑与压力。</p><p>从Kindle阅读这件小事，我思考着工作中也要借鉴这种专注和轻松的心态。举个工作中的例子，面对大量的工作，很显然就是要依赖todolist这些工具，用gtd（get things done)理念，把事情和压力分解。不过话说回来，本质上还是要自己好学，毕竟Kindle之类都是工具，真正要吸收养分，内因不可忽略。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前几个月，我买入了一台Kindle。买之前因为有比较强烈的阅读需求，所以也没有犹豫太长时间，入手了Kindle Oasis3。&lt;/p&gt;
&lt;p&gt;Kindle这个阅读器很神奇，让我在短短几个月阅读了十多本充电用的书籍，包括技术，投资相关。近一两周因为工作的原因，我暂时搁置Kindle没有继续看。直到今天重新拿起来看了些旧书温习，我对Kindle这种方式阅读书籍有了一些思考。&lt;/p&gt;
&lt;p&gt;纸质书有着最好的阅读体验，但是厚重这一点，就让许多人在繁忙的工作之余望而却步了。退而求其次，选择用手机去看，我个人也容易被其他App吸引，导致没有很好的办法长时间专注去看。当我选择了Kindle之后，觉得找到了另一种阅读的体验，那就是方便又专注。这种感觉让我在面对五颜六色的代码编辑器之余，多了一种感受黄金屋美好的体验。它的方便携带和舒适的阅读体验，让我即使在工作之余，也放下了对阅读大部头的心理压力，因为说实话我感觉当下面对的只是Kindle的一个小屏幕，又或者说这是一个小屏幕上的一页文字。这种轻松方便的感觉反而促进我认真学习，不知不觉看多了很多书。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="技术杂谈" scheme="http://yoursite.com/tags/%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/"/>
    
  </entry>
  
  <entry>
    <title>多包管理器Lerna实践总结</title>
    <link href="http://yoursite.com/2019/11/20/%E5%A4%9A%E5%8C%85%E7%AE%A1%E7%90%86%E5%99%A8Lerna%E5%AE%9E%E8%B7%B5%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2019/11/20/%E5%A4%9A%E5%8C%85%E7%AE%A1%E7%90%86%E5%99%A8Lerna%E5%AE%9E%E8%B7%B5%E6%80%BB%E7%BB%93/</id>
    <published>2019-11-19T16:54:12.000Z</published>
    <updated>2020-03-01T17:39:41.604Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>什么是Lerna？截取github上面的description如下：</p><blockquote><p>A tool for managing JavaScript projects with multiple packages.</p></blockquote><h2 id="monorepo"><a href="#monorepo" class="headerlink" title="monorepo"></a>monorepo</h2><p>最近工作中维护多个项目，均用到Lerna这个多包管理器。通过使用Lerna, 感受了monorepo维护项目的好处。</p><p>对于monorepo的介绍，请<a href="https://trunkbaseddevelopment.com/monorepos/" target="_blank" rel="noopener">点击此处</a></p><p>目前出名的前端开源项目也有很多使用了Lerna去维护。</p><ul><li><a href="https://github.com/facebook/react" target="_blank" rel="noopener">React</a></li><li><a href="https://github.com/babel/babel" target="_blank" rel="noopener">Babel</a></li><li><a href="https://github.com/emberjs/ember.js" target="_blank" rel="noopener">Ember</a><a id="more"></a>其中Babel仓库还专门写了monorepo的优缺点。<br>摘录如下：</li></ul><p><strong>Pros:</strong></p><ul><li>Single lint, build, test and release process.</li><li>Easy to coordinate changes across modules.</li><li>Single place to report issues.</li><li>Easier to setup a development environment.</li><li>Tests across modules are run together which finds bugs that touch multiple modules more easily.</li></ul><p><strong>Cons:</strong></p><ul><li>Codebase looks more intimidating.</li><li>Repo is bigger in size.</li><li><a href="https://github.com/npm/npm/issues/2974" target="_blank" rel="noopener">Can’t <code>npm install</code> modules directly from GitHub</a></li><li>???</li></ul><p>Babel的文档已经把monorepo的好处总结的非常到位了，而monorepo的缺点，也是瑕不掩瑜。</p><p>Codebase looks more intimidating.这一个缺点确实一开始令我头疼，但是意识到monorepo的优点（也就是它解决了其他更严重的问题）之后，我就开始慢慢接受并习惯。</p><h2 id="Lerna做了什么"><a href="#Lerna做了什么" class="headerlink" title="Lerna做了什么"></a>Lerna做了什么</h2><p>聊完monorepo，我们来看看Lerna帮我们做了哪些事情。</p><ul><li>开发过程中：维护项目多个npm包之间的关系<ul><li>减少重复安装依赖</li><li>开发中直接映射依赖包最新代码</li><li>维护复杂的依赖关系，即版本号关系</li></ul></li><li>发布过程中：维护项目多个npm发布包的版本号和自动打tag</li></ul><p>无论是开发过程还是发布包的过程，Lerna都帮我们做了很多手动维护难以完成的工作。对于多个npm包还有版本的维护，如果手动维护，将是一个灾难。当然了，又因为这些包之间的依赖深，如果用multirepo的方式维护，会出现更多难以维护的问题。所以可以开出，Lerna对于多个npm包用monorepo的方式维护，算是提供了非常强力的辅助。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;什么是Lerna？截取github上面的description如下：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A tool for managing JavaScript projects with multiple packages.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;monorepo&quot;&gt;&lt;a href=&quot;#monorepo&quot; class=&quot;headerlink&quot; title=&quot;monorepo&quot;&gt;&lt;/a&gt;monorepo&lt;/h2&gt;&lt;p&gt;最近工作中维护多个项目，均用到Lerna这个多包管理器。通过使用Lerna, 感受了monorepo维护项目的好处。&lt;/p&gt;
&lt;p&gt;对于monorepo的介绍，请&lt;a href=&quot;https://trunkbaseddevelopment.com/monorepos/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;点击此处&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;目前出名的前端开源项目也有很多使用了Lerna去维护。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/facebook/react&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;React&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/babel/babel&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Babel&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/emberjs/ember.js&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Ember&lt;/a&gt;
    
    </summary>
    
    
    
      <category term="前端工程化" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96/"/>
    
      <category term="Lerna" scheme="http://yoursite.com/tags/Lerna/"/>
    
  </entry>
  
  <entry>
    <title>前端工程化实践系列--规范化</title>
    <link href="http://yoursite.com/2019/11/08/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96%E5%AE%9E%E8%B7%B5%E7%B3%BB%E5%88%97--%E6%A0%87%E5%87%86%E5%8C%96%E5%88%B6%E5%AE%9A/"/>
    <id>http://yoursite.com/2019/11/08/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96%E5%AE%9E%E8%B7%B5%E7%B3%BB%E5%88%97--%E6%A0%87%E5%87%86%E5%8C%96%E5%88%B6%E5%AE%9A/</id>
    <published>2019-11-08T05:25:34.000Z</published>
    <updated>2020-01-29T10:59:34.340Z</updated>
    
    <content type="html"><![CDATA[<p>最近在工作中有做前端工程化的一些实践，现在我就把其中的思想和实践总结出来，供日后参考。</p><h2 id="为什么需要规范化"><a href="#为什么需要规范化" class="headerlink" title="为什么需要规范化"></a>为什么需要规范化</h2><p>面对这个问题，可能有些同学脑子里浮现的是eslint的各种报错，可能是git commit前eslint检查不通过导致失败。</p><p>大家在开发过程中去解决这些问题，会不会觉得很恼火呢？我很恼火，至少当我在想明白这个问题之前，即，为什么需要规范化。</p><p>工作和生活中，很多事情都是trade off的结果，当大家都忍受着麻烦努力做一件事情的时候，很大可能就是，不做这些，会更糟糕。</p><p>简言之，个人觉得前端开发规范化的最重要原因就是<strong>提高团队整体开发效率</strong>。往细说，可以简单分三点。</p><ul><li>降低犯错的概率</li><li>提高团队代码质量</li><li>提高项目可维护性</li></ul><p>提高团队整体开发效率这一件事，值得我们去制定规范，落地规范，配套工具提高规范实践效率，并为之解决工具本身带来的新问题。因此我们不能只是看到规范化给开发带来的困扰，更要看到其本质作用。</p><a id="more"></a><h2 id="规范化涉及的方面"><a href="#规范化涉及的方面" class="headerlink" title="规范化涉及的方面"></a>规范化涉及的方面</h2><p>明确了规范化的意义，现在对我在工程中实践过的规范化内容和相应的工具做一个简单的总结。</p><ul><li>代码格式规范化<ul><li>ESLint</li><li>lint-staged</li><li>husky</li></ul></li><li>commit规范化<ul><li>commitizen</li><li>husky</li><li>commitlint</li><li>conventional-changelog-cli</li></ul></li><li>git流程规范化<ul><li>git-flow</li></ul></li></ul><p>如果对上面的实践展开讲，有很多实践的细节可以说。假设各位读者都有能力根据罗列出来的点去搭建一个开发流程更规范的前端脚手架，那我们应该在搭建脚手架之外做什么思考呢？</p><ol><li>执行</li><li>执行</li><li>执行</li></ol><p>规则都是人定出来的，破坏规则的也可以是人。如果团队成员内心不认可规范化的价值，那么工具或者文档写的再好，都不能起到正面的作用。所以规范制定的过程中，尽可能参考业界规范，并在团队内部达（打）成共识。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在工作中有做前端工程化的一些实践，现在我就把其中的思想和实践总结出来，供日后参考。&lt;/p&gt;
&lt;h2 id=&quot;为什么需要规范化&quot;&gt;&lt;a href=&quot;#为什么需要规范化&quot; class=&quot;headerlink&quot; title=&quot;为什么需要规范化&quot;&gt;&lt;/a&gt;为什么需要规范化&lt;/h2&gt;&lt;p&gt;面对这个问题，可能有些同学脑子里浮现的是eslint的各种报错，可能是git commit前eslint检查不通过导致失败。&lt;/p&gt;
&lt;p&gt;大家在开发过程中去解决这些问题，会不会觉得很恼火呢？我很恼火，至少当我在想明白这个问题之前，即，为什么需要规范化。&lt;/p&gt;
&lt;p&gt;工作和生活中，很多事情都是trade off的结果，当大家都忍受着麻烦努力做一件事情的时候，很大可能就是，不做这些，会更糟糕。&lt;/p&gt;
&lt;p&gt;简言之，个人觉得前端开发规范化的最重要原因就是&lt;strong&gt;提高团队整体开发效率&lt;/strong&gt;。往细说，可以简单分三点。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;降低犯错的概率&lt;/li&gt;
&lt;li&gt;提高团队代码质量&lt;/li&gt;
&lt;li&gt;提高项目可维护性&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;提高团队整体开发效率这一件事，值得我们去制定规范，落地规范，配套工具提高规范实践效率，并为之解决工具本身带来的新问题。因此我们不能只是看到规范化给开发带来的困扰，更要看到其本质作用。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="前端工程化" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96/"/>
    
      <category term="标准" scheme="http://yoursite.com/tags/%E6%A0%87%E5%87%86/"/>
    
  </entry>
  
</feed>
